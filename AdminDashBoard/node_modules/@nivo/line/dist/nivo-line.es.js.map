{"version":3,"file":"nivo-line.es.js","sources":["../src/PointTooltip.js","../src/SliceTooltip.js","../src/props.js","../src/hooks.js","../src/Areas.js","../src/LinesItem.js","../src/Lines.js","../src/SlicesItem.js","../src/Slices.js","../src/Points.js","../src/Mesh.js","../src/Line.js","../src/ResponsiveLine.js","../src/LineCanvas.js","../src/ResponsiveLineCanvas.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { LegendPropShape } from '@nivo/legends'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: PropTypes.object.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: PropTypes.object.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: PropTypes.string.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    enableTouchCrosshair: PropTypes.bool,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    enableTouchCrosshair: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport uniqueId from 'lodash/uniqueId'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ componentId, enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: `slice:${componentId}:${x}`,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [componentId, enableSlices, height, points, width])\n}\n\nexport const LINE_UNIQUE_ID_PREFIX = 'line'\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n}) => {\n    const [componentId] = useState(uniqueId(LINE_UNIQUE_ID_PREFIX))\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState([])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        componentId,\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({\n    slice,\n    slices,\n    axis,\n    debug,\n    tooltip,\n    isCurrent,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onMouseEnter && onMouseEnter(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, setCurrent, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            onMouseMove && onMouseMove(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(slice, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave, slice]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(slice, event)\n        },\n        [slice, onClick]\n    )\n\n    const handeOnTouchStart = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onTouchStart && onTouchStart(slice, event)\n        },\n        [axis, onTouchStart, setCurrent, showTooltipFromEvent, slice, tooltip]\n    )\n\n    const handeOnTouchMove = useCallback(\n        event => {\n            // This event will be locked to the element that was touched originally\n            // We find the element that is currently being \"hovered over\" by getting the element at the touch point\n            const touchPoint = event.touches[0]\n            const touchingElement = document.elementFromPoint(\n                touchPoint.clientX,\n                touchPoint.clientY\n            )\n            // Is this a nivo ref?\n            const touchingSliceId = touchingElement?.getAttribute('data-ref')\n            if (touchingSliceId) {\n                // Is this a slice for this graph?\n                const slice = slices.find(slice => slice.id === touchingSliceId)\n                if (slice) {\n                    showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n                    setCurrent(slice)\n                }\n            }\n\n            // Note here, this will pass the original slice, not the one we found\n            // But this can be found with document.elementFromPoint()\n            onTouchMove && onTouchMove(slice, event)\n        },\n        [axis, onTouchMove, setCurrent, showTooltipFromEvent, slice, slices, tooltip]\n    )\n\n    const handleOnTouchEnd = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onTouchEnd && onTouchEnd(slice, event)\n        },\n        [hideTooltip, setCurrent, onTouchEnd, slice]\n    )\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            onTouchStart={handeOnTouchStart}\n            onTouchMove={handeOnTouchMove}\n            onTouchEnd={handleOnTouchEnd}\n            data-ref={slice.id}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    slices: PropTypes.arrayOf(PropTypes.object).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(SlicesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({\n    slices,\n    axis,\n    debug,\n    height,\n    tooltip,\n    current,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            slices={slices}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n            onMouseEnter={onMouseEnter}\n            onMouseMove={onMouseMove}\n            onMouseLeave={onMouseLeave}\n            onClick={onClick}\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMove}\n            onTouchEnd={onTouchEnd}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    onTouchStart: PropTypes.func,\n    onTouchMove: PropTypes.func,\n    onTouchEnd: PropTypes.func,\n}\n\nexport default memo(Slices)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points\n        .slice(0)\n        .reverse()\n        .map(point => {\n            const mappedPoint = {\n                id: point.id,\n                x: point.x,\n                y: point.y,\n                datum: point.data,\n                fill: point.color,\n                stroke: point.borderColor,\n                label: enableLabel ? getLabel(point.data) : null,\n            }\n\n            return mappedPoint\n        })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    tooltip,\n    debug,\n    enableTouchCrosshair,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, setCurrent, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    const handleTouchStart = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onTouchStart && onTouchStart(point, event)\n        },\n        [margin.left, margin.top, onTouchStart, setCurrent, showTooltipAt, tooltip]\n    )\n\n    const handleTouchMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onTouchMove && onTouchMove(point, event)\n        },\n        [margin.left, margin.top, onTouchMove, setCurrent, showTooltipAt, tooltip]\n    )\n\n    const handleTouchEnd = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onTouchEnd && onTouchEnd(point, event)\n        },\n        [onTouchEnd, hideTooltip, setCurrent]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n            enableTouchCrosshair={enableTouchCrosshair}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    onTouchStart: PropTypes.func,\n    onTouchMove: PropTypes.func,\n    onTouchEnd: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useState } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec = { type: 'point' },\n        xFormat,\n        yScale: yScaleSpec = {\n            type: 'linear',\n            min: 0,\n            max: 'auto',\n        },\n        yFormat,\n        layers = [\n            'grid',\n            'markers',\n            'axes',\n            'areas',\n            'crosshair',\n            'lines',\n            'points',\n            'slices',\n            'mesh',\n            'legends',\n        ],\n        curve = 'linear',\n        areaBaselineValue = 0,\n\n        colors = { scheme: 'nivo' },\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom = {},\n        axisLeft = {},\n        enableGridX = true,\n        enableGridY = true,\n        gridXValues,\n        gridYValues,\n\n        lineWidth = 2,\n        enableArea = false,\n        areaOpacity = 0.2,\n        areaBlendMode = 'normal',\n\n        enablePoints = true,\n        pointSymbol,\n        pointSize = 6,\n        pointColor = { from: 'color' },\n        pointBorderWidth = 0,\n        pointBorderColor = { theme: 'background' },\n        enablePointLabel = false,\n        pointLabel = 'yFormatted',\n        pointLabelYOffset,\n\n        defs = [],\n        fill = [],\n\n        markers,\n\n        legends = [],\n\n        isInteractive = true,\n\n        useMesh = false,\n        debugMesh = false,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        onTouchStart,\n        onTouchMove,\n        onTouchEnd,\n\n        tooltip = PointTooltip,\n\n        enableSlices = false,\n        debugSlices = false,\n        sliceTooltip = SliceTooltip,\n\n        enableCrosshair = true,\n        crosshairType = 'bottom-left',\n        enableTouchCrosshair = false,\n\n        role = 'img',\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n                tooltip={tooltip}\n                enableTouchCrosshair={enableTouchCrosshair}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\n\nexport default withContainer(Line)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes } from './props'\nimport { useLine } from './hooks'\nimport PointTooltip from './PointTooltip'\n\nconst LineCanvas = props => {\n    const canvasEl = useRef(null)\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n\n        data,\n        xScale: xScaleSpec = { type: 'point' },\n        xFormat,\n        yScale: yScaleSpec = {\n            type: 'linear',\n            min: 0,\n            max: 'auto',\n        },\n        yFormat,\n        curve = 'linear',\n\n        layers = [\n            'grid',\n            'markers',\n            'axes',\n            'areas',\n            'crosshair',\n            'lines',\n            'points',\n            'slices',\n            'mesh',\n            'legends',\n        ],\n\n        colors = { scheme: 'nivo' },\n        lineWidth = 2,\n\n        enableArea = false,\n        areaBaselineValue = 0,\n        areaOpacity = 0.2,\n\n        enablePoints = true,\n        pointSize = 6,\n        pointColor = { from: 'color' },\n        pointBorderWidth = 0,\n        pointBorderColor = { theme: 'background' },\n\n        enableGridX = true,\n        gridXValues,\n        enableGridY = true,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom = {},\n        axisLeft = {},\n\n        legends = [],\n\n        isInteractive = true,\n        debugMesh = false,\n        //onMouseEnter,\n        //onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip = PointTooltip,\n        canvasRef,\n    } = props\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n"],"names":["LinePointTooltip","_ref","point","_jsx","BasicTooltip","id","_jsxs","children","data","xFormatted","yFormatted","enableChip","color","serieColor","propTypes","PropTypes","object","isRequired","memo","SliceTooltip","slice","axis","theme","useTheme","otherAxis","TableTooltip","rows","points","map","Chip","style","tooltip","chip","serieId","tableCellValue","oneOf","commonPropTypes","arrayOf","shape","oneOfType","string","number","x","instanceOf","Date","y","xScale","xFormat","func","yScale","yFormat","layers","curve","lineCurvePropType","axisTop","axisPropType","axisRight","axisBottom","axisLeft","enableGridX","bool","enableGridY","gridXValues","gridYValues","enablePoints","pointSymbol","pointSize","pointColor","any","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","markers","value","colors","ordinalColorsPropType","enableArea","areaOpacity","areaBlendMode","blendModePropType","areaBaselineValue","lineWidth","legends","LegendPropShape","isInteractive","debugMesh","enableSlices","debugSlices","sliceTooltip","enableCrosshair","crosshairType","LinePropTypes","_extends","role","useMesh","enableTouchCrosshair","motionPropTypes","defsPropTypes","LineCanvasPropTypes","pixelRatio","commonDefaultProps","type","min","max","from","scheme","PointTooltip","LineDefaultProps","animate","motionConfig","defs","fill","LineCanvasDefaultProps","window","devicePixelRatio","useLineGenerator","useMemo","line","defined","d","curveFromProp","useAreaGenerator","_ref2","area","y1","y0","useSlices","_ref4","componentId","width","height","Map","forEach","has","get","push","set","Array","entries","sort","a","b","_ref5","i","slices","x0","sliceWidth","slicePoints","prevSlice","nextSlice","reverse","_ref6","sliceHeight","LINE_UNIQUE_ID_PREFIX","useLine","_ref7","_ref7$xScale","xScaleSpec","_ref7$yScale","yScaleSpec","_ref7$colors","_ref7$curve","_ref7$areaBaselineVal","_ref7$pointColor","_ref7$pointBorderColo","_ref7$enableSlices","enableSlicesTooltip","useState","uniqueId","formatX","useValueFormatter","formatY","getColor","useOrdinalColorScale","getPointColor","useInheritedColor","getPointBorderColor","_useState2","hiddenIds","setHiddenIds","_useMemo","computeXYScalesForSeries","filter","item","indexOf","rawSeries","series","_useMemo2","dataWithColor","label","datum","find","serie","Boolean","legendData","hidden","toggleSerie","useCallback","state","concat","_ref3","reduce","acc","position","index","length","borderColor","usePoints","lineGenerator","areaGenerator","AreaPath","path","_useMotionConfig","useMotionConfig","springConfig","config","animatedPath","useAnimatedPath","animatedProps","useSpring","immediate","animated","fillOpacity","strokeWidth","mixBlendMode","Areas","computedLines","lines","LinesItem","thickness","stroke","Lines","SlicesItem","debug","isCurrent","setCurrent","onMouseEnter","onMouseMove","onMouseLeave","onClick","onTouchStart","onTouchMove","onTouchEnd","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","handeOnTouchStart","handeOnTouchMove","touchPoint","touches","touchingElement","document","elementFromPoint","clientX","clientY","touchingSliceId","getAttribute","handleOnTouchEnd","strokeOpacity","Slices","current","Points","symbol","size","borderWidth","enableLabel","labelYOffset","getLabel","getLabelGenerator","mappedPoints","DotsItem","Mesh","margin","showTooltipAt","left","top","handleTouchStart","handleTouchMove","handleTouchEnd","BaseMesh","nodes","Line","props","_props$xScale","_props$yScale","_props$layers","_props$curve","_props$areaBaselineVa","_props$colors","partialMargin","_props$axisBottom","_props$axisLeft","_props$enableGridX","_props$enableGridY","_props$lineWidth","_props$enableArea","_props$areaOpacity","_props$areaBlendMode","_props$enablePoints","_props$pointSize","_props$pointColor","_props$pointBorderWid","_props$pointBorderCol","_props$enablePointLab","_props$pointLabel","pointLabelYOffset","_props$defs","_props$fill","_props$legends","_props$isInteractive","_props$useMesh","_props$debugMesh","_props$tooltip","_props$enableSlices","_props$debugSlices","_props$sliceTooltip","_props$enableCrosshai","_props$crosshairType","_props$enableTouchCro","_props$role","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useLine","_useState","currentPoint","setCurrentPoint","currentSlice","setCurrentSlice","layerById","grid","Grid","xValues","yValues","CartesianMarkers","axes","Axes","right","bottom","areas","crosshair","mesh","legend","BoxLegendSvg","containerWidth","containerHeight","undefined","boundDefs","bindDefs","Crosshair","SvgWrapper","layer","Fragment","withContainer","ResponsiveLine","ResponsiveWrapper","LineCanvas","canvasEl","useRef","_props$pixelRatio","canvasRef","_useVoronoiMesh","useVoronoiMesh","delaunay","voronoi","useEffect","ctx","getContext","scale","fillStyle","background","fillRect","translate","strokeStyle","renderGridLinesToCanvas","values","renderAxesToCanvas","save","globalAlpha","context","beginPath","restore","arc","Math","PI","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getPointFromMouseEvent","_getRelativeCursor","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","ref","cursor","LineCanvasWithContainer","LineCanvas$1","forwardRef"],"mappings":"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"}