{
  "version": 3,
  "sources": ["../../@nivo/arcs/src/arc_labels/ArcLabel.tsx", "../../@nivo/arcs/src/utils.ts", "../../@nivo/arcs/src/arcTransitionMode.ts", "../../@nivo/arcs/src/centers.ts", "../../@nivo/arcs/src/arc_labels/ArcLabelsLayer.tsx", "../../@nivo/arcs/src/arc_labels/canvas.ts", "../../@nivo/arcs/src/arc_labels/useArcLabels.ts", "../../@nivo/arcs/src/arc_labels/index.ts", "../../@nivo/arcs/src/arc_link_labels/ArcLinkLabel.tsx", "../../@nivo/arcs/src/arc_link_labels/compute.ts", "../../@nivo/arcs/src/arc_link_labels/useArcLinkLabelsTransition.ts", "../../@nivo/arcs/src/arc_link_labels/ArcLinkLabelsLayer.tsx", "../../@nivo/arcs/src/arc_link_labels/canvas.ts", "../../@nivo/arcs/src/arc_link_labels/useArcLinks.ts", "../../@nivo/arcs/src/arc_link_labels/useArcLinkLabels.ts", "../../@nivo/arcs/src/arc_link_labels/index.ts", "../../@nivo/arcs/src/ArcLine.tsx", "../../@nivo/arcs/src/ArcShape.tsx", "../../@nivo/arcs/src/interpolateArc.ts", "../../@nivo/arcs/src/useArcsTransition.ts", "../../@nivo/arcs/src/ArcsLayer.tsx", "../../@nivo/arcs/src/boundingBox.ts", "../../@nivo/arcs/src/interactivity.ts", "../../@nivo/arcs/src/useAnimatedArc.ts", "../../@nivo/arcs/src/useArcGenerator.ts", "../../@nivo/pie/src/PieLegends.tsx", "../../@nivo/pie/src/props.ts", "../../@nivo/pie/src/PieTooltip.tsx", "../../@nivo/pie/src/hooks.ts", "../../@nivo/pie/src/Arcs.tsx", "../../@nivo/pie/src/Pie.tsx", "../../@nivo/pie/src/ResponsivePie.tsx", "../../@nivo/pie/src/PieCanvas.tsx", "../../@nivo/pie/src/ResponsivePieCanvas.tsx"],
  "sourcesContent": ["import { CSSProperties } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\n\nconst staticStyle: CSSProperties = {\n    pointerEvents: 'none',\n}\n\nexport interface ArcLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        progress: SpringValue<number>\n        transform: Interpolation<string>\n        textColor: string\n    }\n}\n\nexport const ArcLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={style.transform} opacity={style.progress} style={staticStyle}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n", "import { useMemo } from 'react'\nimport { radiansToDegrees, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { DatumWithArc } from './types'\n\n/**\n * Make sure an angle (expressed in radians)\n * always falls in the range 0~2*PI.\n */\nexport const getNormalizedAngle = (angle: number) => {\n    let normalizedAngle = angle % (Math.PI * 2)\n    if (normalizedAngle < 0) {\n        normalizedAngle += Math.PI * 2\n    }\n\n    return normalizedAngle\n}\n\n/**\n * Filter out arcs with a length below `skipAngle`.\n */\nexport const filterDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) =>\n    data.filter(\n        datum => Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle\n    )\n\n/**\n * Memoized version of `filterDataBySkipAngle`.\n */\nexport const useFilteredDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) => useMemo(() => filterDataBySkipAngle(data, skipAngle), [data, skipAngle])\n\nexport const svgEllipticalArcCommand = (\n    radius: number,\n    largeArcFlag: 0 | 1,\n    sweepFlag: 0 | 1,\n    x: number,\n    y: number\n) =>\n    [\n        'A',\n        radius,\n        radius,\n        0, // x-axis-rotation\n        largeArcFlag,\n        sweepFlag,\n        x,\n        y,\n    ].join(' ')\n\nexport const generateSvgArc = (\n    radius: number,\n    originalStartAngle: number,\n    originalEndAngle: number\n): string => {\n    const startAngle = Math.min(originalStartAngle, originalEndAngle)\n    const endAngle = Math.max(originalStartAngle, originalEndAngle)\n\n    const start = positionFromAngle(degreesToRadians(endAngle), radius)\n    const end = positionFromAngle(degreesToRadians(startAngle), radius)\n\n    // we have a full circle, we cannot use a single elliptical arc\n    // to draw it, so we use 2 in that case.\n    if (endAngle - startAngle >= 360) {\n        const mid = positionFromAngle(degreesToRadians(startAngle + 180), radius)\n\n        return [\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y),\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y),\n        ].join(' ')\n    }\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1\n\n    return [\n        `M ${start.x} ${start.y}`,\n        svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y),\n    ].join(' ')\n}\n", "import { Arc, DatumWithArc } from './types'\nimport { useMemo } from 'react'\n\nexport interface ArcTransitionModeConfig {\n    enter: (arc: Arc) => Arc\n    update: (arc: Arc) => Arc\n    leave: (arc: Arc) => Arc\n}\n\nexport const arcTransitionModes = [\n    'startAngle',\n    'middleAngle',\n    'endAngle',\n    'innerRadius',\n    'centerRadius',\n    'outerRadius',\n    'pushIn',\n    'pushOut',\n] as const\nexport type ArcTransitionMode = (typeof arcTransitionModes)[number]\n\nexport const arcTransitionModeById: Record<ArcTransitionMode, ArcTransitionModeConfig> = {\n    startAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n    },\n    middleAngle: {\n        enter: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n    },\n    endAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n    },\n    innerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n    },\n    centerRadius: {\n        enter: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n    },\n    outerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n    pushIn: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n    },\n    pushOut: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n}\n\nexport interface TransitionExtra<Datum extends DatumWithArc, ExtraProps> {\n    enter: (datum: Datum) => ExtraProps\n    update: (datum: Datum) => ExtraProps\n    leave: (datum: Datum) => ExtraProps\n}\n\nexport const useArcTransitionMode = <Datum extends DatumWithArc, ExtraProps>(\n    mode: ArcTransitionMode,\n    extraTransition?: TransitionExtra<Datum, ExtraProps>\n) =>\n    useMemo(() => {\n        const transitionMode = arcTransitionModeById[mode]\n\n        return {\n            enter: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.enter(datum.arc),\n                ...(extraTransition ? extraTransition.enter(datum) : {}),\n            }),\n            update: (datum: Datum) => ({\n                progress: 1,\n                ...transitionMode.update(datum.arc),\n                ...(extraTransition ? extraTransition.update(datum) : {}),\n            }),\n            leave: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.leave(datum.arc),\n                ...(extraTransition ? extraTransition.leave(datum) : {}),\n            }),\n        }\n    }, [mode, extraTransition])\n", "import { useMemo } from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    positionFromAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Arc, DatumWithArc, Point } from './types'\nimport { filterDataBySkipAngle } from './utils'\nimport { ArcTransitionMode, TransitionExtra, useArcTransitionMode } from './arcTransitionMode'\n\nexport const computeArcCenter = (arc: Arc, offset: number): Point => {\n    const angle = midAngle(arc) - Math.PI / 2\n    const radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset\n\n    return positionFromAngle(angle, radius)\n}\n\nexport const interpolateArcCenter =\n    (offset: number) =>\n    (\n        startAngleValue: SpringValue<number>,\n        endAngleValue: SpringValue<number>,\n        innerRadiusValue: SpringValue<number>,\n        outerRadiusValue: SpringValue<number>\n    ) =>\n        to(\n            [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n            (startAngle, endAngle, innerRadius, outerRadius) => {\n                const centroid = computeArcCenter(\n                    { startAngle, endAngle, innerRadius, outerRadius },\n                    offset\n                )\n\n                return `translate(${centroid.x},${centroid.y})`\n            }\n        )\n\nexport const useArcCentersTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset = 0.5,\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArcCenter(offset),\n    }\n}\n\nexport interface ArcCenter<Datum extends DatumWithArc> extends Point {\n    data: Datum\n}\n\n/**\n * Compute an array of arc centers from an array of data containing arcs.\n *\n * If you plan to animate those, you could use `useArcCentersTransition`\n * instead, you could use the returned array with react-spring `useTransition`,\n * but this would lead to cartesian transitions (x/y), while `useArcCentersTransition`\n * will generate proper transitions using radius/angle.\n */\nexport const useArcCenters = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    offset = 0.5,\n    skipAngle = 0,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset?: number\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // this can be used to append extra properties to the centers,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: Datum) => ExtraProps\n}): (ArcCenter<Datum> & ExtraProps)[] =>\n    useMemo(\n        () =>\n            filterDataBySkipAngle<Datum>(data, skipAngle)\n                // compute position and extra props for each eligible datum\n                .map(datum => {\n                    const position = computeArcCenter(datum.arc, offset)\n\n                    return {\n                        ...computeExtraProps(datum),\n                        x: position.x,\n                        y: position.y,\n                        data: datum,\n                    }\n                }),\n        [data, offset, skipAngle, computeExtraProps]\n    )\n", "import { createElement, useMemo } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, radiansToDegrees, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useArcCentersTransition } from '../centers'\nimport { ArcTransitionMode } from '../arcTransitionMode'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabelsProps } from './props'\nimport { ArcLabel, ArcLabelProps } from './ArcLabel'\n\nexport type ArcLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: PropertyAccessor<Datum, string>\n    radiusOffset: ArcLabelsProps<Datum>['arcLabelsRadiusOffset']\n    skipAngle: ArcLabelsProps<Datum>['arcLabelsSkipAngle']\n    textColor: ArcLabelsProps<Datum>['arcLabelsTextColor']\n    transitionMode: ArcTransitionMode\n    component?: ArcLabelsProps<Datum>['arcLabelsComponent']\n}\n\nexport const ArcLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    transitionMode,\n    label: labelAccessor,\n    radiusOffset,\n    skipAngle,\n    textColor,\n    component = ArcLabel,\n}: ArcLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useMemo(\n        () =>\n            data.filter(datum => {\n                return (\n                    Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                    skipAngle\n                )\n            }),\n        [data, skipAngle]\n    )\n\n    const { transition, interpolate } = useArcCentersTransition<Datum>(\n        filteredData,\n        radiusOffset,\n        transitionMode\n    )\n\n    const Label: ArcLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        transform: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textColor: getTextColor(datum),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n", "import { CompleteTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabel } from './useArcLabels'\n\nexport const drawCanvasArcLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLabel<Datum>[],\n    theme: CompleteTheme\n) => {\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.fillText(`${label.label}`, label.x, label.y)\n    })\n}\n", "import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcCenters, ArcCenter } from '../centers'\n\nexport interface ArcLabel<Datum extends DatumWithArcAndColor> extends ArcCenter<Datum> {\n    label: string\n    textColor: string\n}\n\n/**\n * Compute arc labels, please note that the datum should\n * contain a color in order to be able to compute the label text color.\n *\n * Please see `useArcCenters` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset,\n    skipAngle,\n    label,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    skipAngle?: number\n    label: PropertyAccessor<Datum, string>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (datum: Datum) => {\n            return {\n                label: getLabel(datum),\n                textColor: getTextColor(datum),\n            }\n        },\n        [getLabel, getTextColor]\n    )\n\n    return useArcCenters<Datum, Omit<ArcLabel<Datum>, keyof ArcCenter<Datum>>>({\n        data,\n        offset,\n        skipAngle,\n        computeExtraProps,\n    })\n}\n", "import { ArcLabel } from './ArcLabel'\n\nexport const ArcLabelComponent = ArcLabel\nexport * from './ArcLabelsLayer'\nexport * from './canvas'\nexport * from './props'\nexport * from './useArcLabels'\n", "import { useTheme } from '@nivo/core'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from '../types'\n\nexport interface ArcLinkLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        path: Interpolation<string>\n        thickness: number\n        textPosition: Interpolation<string>\n        textAnchor: Interpolation<'start' | 'end'>\n        linkColor: SpringValue<string>\n        opacity: SpringValue<number>\n        textColor: SpringValue<string>\n    }\n}\n\nexport const ArcLinkLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLinkLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={style.opacity}>\n            <animated.path\n                fill=\"none\"\n                stroke={style.linkColor}\n                strokeWidth={style.thickness}\n                d={style.path}\n            />\n            <animated.text\n                transform={style.textPosition}\n                textAnchor={style.textAnchor}\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n", "import { positionFromAngle } from '@nivo/core'\nimport { Arc, Point } from '../types'\nimport { getNormalizedAngle } from '../utils'\nimport { ArcLink } from './types'\n\n/**\n * Compute text anchor for a given arc.\n *\n * `computeArcLink` already computes a `side`, but when using\n * `react-spring`, you cannot have a single interpolation\n * returning several output values, so we need to compute\n * them in separate interpolations.\n */\nexport const computeArcLinkTextAnchor = (arc: Arc): 'start' | 'end' => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        return 'start'\n    }\n\n    return 'end'\n}\n\n/**\n * Compute the link of a single arc, returning its points,\n * please note that points coordinates are relative to\n * the center of the arc.\n */\nexport const computeArcLink = (\n    arc: Arc,\n    offset: number,\n    diagonalLength: number,\n    straightLength: number\n): ArcLink => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n    const point0: Point = positionFromAngle(centerAngle, arc.outerRadius + offset)\n    const point1: Point = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength)\n\n    let side: ArcLink['side']\n    let point2: Point\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        side = 'after'\n        point2 = {\n            x: point1.x + straightLength,\n            y: point1.y,\n        }\n    } else {\n        side = 'before'\n        point2 = {\n            x: point1.x - straightLength,\n            y: point1.y,\n        }\n    }\n\n    return {\n        side,\n        points: [point0, point1, point2],\n    }\n}\n", "import { useMemo } from 'react'\nimport { SpringValue, useTransition, to } from '@react-spring/web'\nimport { line } from 'd3-shape'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, Point } from '../types'\nimport { useFilteredDataBySkipAngle } from '../utils'\nimport { computeArcLink, computeArcLinkTextAnchor } from './compute'\n\nconst lineGenerator = line<Point>()\n    .x(d => d.x)\n    .y(d => d.y)\n\ntype AnimatedProps = {\n    startAngle: number\n    endAngle: number\n    innerRadius: number\n    outerRadius: number\n    offset: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    linkColor: string\n    textColor: string\n    opacity: number\n}\n\nconst useTransitionPhases = <Datum extends DatumWithArcAndColor>({\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset,\n    getLinkColor,\n    getTextColor,\n}: Pick<AnimatedProps, 'offset' | 'diagonalLength' | 'straightLength' | 'textOffset'> & {\n    getLinkColor: (datum: Datum) => string\n    getTextColor: (datum: Datum) => string\n}): Record<'enter' | 'update' | 'leave', (datum: Datum) => AnimatedProps> =>\n    useMemo(\n        () => ({\n            enter: (datum: Datum) => ({\n                startAngle: datum.arc.startAngle,\n                endAngle: datum.arc.endAngle,\n                innerRadius: datum.arc.innerRadius,\n                outerRadius: datum.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(datum),\n                textColor: getTextColor(datum),\n                opacity: 0,\n            }),\n            update: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength,\n                straightLength,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 1,\n            }),\n            leave: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 0,\n            }),\n        }),\n        [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor, offset]\n    )\n\nconst interpolateLink = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated\n        ) => {\n            const { points } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            return lineGenerator(points)\n        }\n    )\n\nconst interpolateTextAnchor = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return computeArcLinkTextAnchor({\n                startAngle,\n                endAngle,\n                innerRadius,\n                outerRadius,\n            })\n        }\n    )\n\n/**\n * Interpolating the text position involves almost the same computation\n * as `interpolateLink`, unfortunately `react-spring` does not support\n * multiple output values from a single interpolation.\n *\n * We should revise this if `react-spring` adds this feature at some point.\n */\nconst interpolateTextPosition = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>,\n    textOffsetValue: SpringValue<AnimatedProps['textOffset']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n            textOffsetValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated,\n            textOffset\n        ) => {\n            const { points, side } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            const position = points[2]\n            if (side === 'before') {\n                position.x -= textOffset\n            } else {\n                position.x += textOffset\n            }\n\n            return `translate(${position.x},${position.y})`\n        }\n    )\n\n/**\n * This hook can be used to animate a group of arc link labels,\n * if you just want to compute the labels, please use `useArcLinkLabels`.\n */\nexport const useArcLinkLabelsTransition = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset = 0,\n    diagonalLength,\n    straightLength,\n    skipAngle = 0,\n    textOffset,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    skipAngle?: number\n    textOffset: number\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useFilteredDataBySkipAngle<Datum>(data, skipAngle)\n    const transitionPhases = useTransitionPhases<Datum>({\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        getLinkColor,\n        getTextColor,\n    })\n\n    const transition = useTransition<Datum, AnimatedProps>(filteredData, {\n        keys: datum => datum.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    }\n}\n", "import { createElement } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcLinkLabelsTransition } from './useArcLinkLabelsTransition'\nimport { ArcLinkLabelsProps } from './props'\nimport { ArcLinkLabel, ArcLinkLabelProps } from './ArcLinkLabel'\n\nexport type ArcLinkLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLinkLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLinkLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: ArcLinkLabelsProps<Datum>['arcLinkLabel']\n    skipAngle: ArcLinkLabelsProps<Datum>['arcLinkLabelsSkipAngle']\n    offset: ArcLinkLabelsProps<Datum>['arcLinkLabelsOffset']\n    diagonalLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsDiagonalLength']\n    straightLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsStraightLength']\n    strokeWidth: ArcLinkLabelsProps<Datum>['arcLinkLabelsThickness']\n    textOffset: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextOffset']\n    textColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextColor']\n    linkColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsColor']\n    component?: ArcLinkLabelComponent<Datum>\n}\n\nexport const ArcLinkLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    label: labelAccessor,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    strokeWidth,\n    textOffset,\n    textColor,\n    linkColor,\n    component = ArcLinkLabel,\n}: ArcLinkLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n\n    const { transition, interpolateLink, interpolateTextAnchor, interpolateTextPosition } =\n        useArcLinkLabelsTransition<Datum>({\n            data,\n            skipAngle,\n            offset,\n            diagonalLength,\n            straightLength,\n            textOffset,\n            linkColor,\n            textColor,\n        })\n\n    const Label: ArcLinkLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        thickness: strokeWidth,\n                        path: interpolateLink(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength\n                        ),\n                        textAnchor: interpolateTextAnchor(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textPosition: interpolateTextPosition(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength,\n                            transitionProps.textOffset\n                        ),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n", "import {\n    // @ts-ignore\n    textPropsByEngine,\n    CompleteTheme,\n} from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkLabel } from './types'\n\nexport const drawCanvasArcLinkLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLinkLabel<Datum>[],\n    theme: CompleteTheme,\n    strokeWidth: number\n) => {\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.textAlign = textPropsByEngine.canvas.align[label.textAnchor]\n        ctx.fillText(`${label.label}`, label.x, label.y)\n\n        ctx.beginPath()\n        ctx.strokeStyle = label.linkColor\n        ctx.lineWidth = strokeWidth\n        label.points.forEach((point, index) => {\n            if (index === 0) ctx.moveTo(point.x, point.y)\n            else ctx.lineTo(point.x, point.y)\n        })\n        ctx.stroke()\n    })\n}\n", "import { useMemo } from 'react'\nimport { radiansToDegrees } from '@nivo/core'\nimport { DatumWithArc } from '../types'\nimport { ArcLinkWithDatum } from './types'\nimport { computeArcLink } from './compute'\n\n/**\n * Compute links for an array of data containing arcs.\n *\n * This is typically used to create labels for arcs,\n * and it's used for the `useArcLinkLabels` hook.\n */\nexport const useArcLinks = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    skipAngle = 0,\n    offset = 0.5,\n    diagonalLength,\n    straightLength,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // offset from arc outer radius in pixels\n    offset?: number\n    // length of the diagonal segment of the link\n    diagonalLength: number\n    // length of the straight segment of the link\n    straightLength: number\n    // this can be used to append extra properties to the links,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: ArcLinkWithDatum<Datum>) => ExtraProps\n}): (ArcLinkWithDatum<Datum> & ExtraProps)[] => {\n    const links = useMemo(\n        () =>\n            data\n                // filter out arcs with a length below `skipAngle`\n                .filter(\n                    datum =>\n                        Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                        skipAngle\n                )\n                // compute the link for each eligible arc\n                .map(datum => ({\n                    ...computeArcLink(datum.arc, offset, diagonalLength, straightLength),\n                    data: datum,\n                })),\n        [data, skipAngle, offset, diagonalLength, straightLength]\n    )\n\n    // splitting memoization of links and extra props can be more efficient,\n    // this way if only `computeExtraProps` changes, we skip links computation.\n    return useMemo(\n        () =>\n            links.map(link => ({\n                ...computeExtraProps(link),\n                ...link,\n            })),\n        [links, computeExtraProps]\n    )\n}\n", "import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkWithDatum, ArcLinkLabel } from './types'\nimport { useArcLinks } from './useArcLinks'\n\n/**\n * Compute arc link labels, please note that the datum should\n * contain a color in order to be able to compute the link/label text color.\n *\n * Please see `useArcLinks` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLinkLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset = 0,\n    label,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    skipAngle?: number\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    label: PropertyAccessor<Datum, string>\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (link: ArcLinkWithDatum<Datum>) => {\n            const position = {\n                x: link.points[2].x,\n                y: link.points[2].y,\n            }\n            let textAnchor: ArcLinkLabel<Datum>['textAnchor']\n            if (link.side === 'before') {\n                position.x -= textOffset\n                textAnchor = 'end'\n            } else {\n                position.x += textOffset\n                textAnchor = 'start'\n            }\n\n            return {\n                ...position,\n                label: getLabel(link.data),\n                linkColor: getLinkColor(link.data),\n                textAnchor,\n                textColor: getTextColor(link.data),\n            }\n        },\n        [getLabel, getLinkColor, getTextColor, textOffset]\n    )\n\n    return useArcLinks<Datum, Omit<ArcLinkLabel<Datum>, keyof ArcLinkWithDatum<Datum>>>({\n        data,\n        skipAngle,\n        offset,\n        diagonalLength,\n        straightLength,\n        computeExtraProps,\n    })\n}\n", "import { ArcLinkLabel } from './ArcLinkLabel'\n\nexport const ArcLinkLabelComponent = ArcLinkLabel\nexport * from './ArcLinkLabelsLayer'\nexport * from './canvas'\nexport * from './compute'\nexport * from './props'\nexport * from './types'\nexport * from './useArcLinkLabels'\nexport * from './useArcLinkLabelsTransition'\nexport * from './useArcLinks'\n", "import { animated, to, AnimatedProps } from '@react-spring/web'\nimport { ExtractProps } from '@nivo/core'\nimport { generateSvgArc } from './utils'\n\ntype ArcLineProps = {\n    animated: AnimatedProps<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>\n} & ExtractProps<typeof animated.path>\n\nexport const ArcLine = ({ animated: animatedProps, ...rest }: ArcLineProps) => (\n    <animated.path\n        d={to(\n            [animatedProps.radius, animatedProps.startAngle, animatedProps.endAngle],\n            (radius, start, end) => generateSvgArc(radius, start, end)\n        )}\n        {...rest}\n    />\n)\n", "import { useCallback, MouseEvent } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from './types'\n\nexport type ArcMouseHandler<Datum extends DatumWithArcAndColor> = (\n    datum: Datum,\n    event: MouseEvent<SVGPathElement>\n) => void\n\nexport interface ArcShapeProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    style: {\n        opacity: SpringValue<number>\n        color: SpringValue<string>\n        borderWidth: number\n        borderColor: SpringValue<string>\n        path: Interpolation<string>\n    }\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n}\n\n/**\n * A simple arc component to be used typically with an `ArcsLayer`.\n *\n * Please note that the component accepts `SpringValue`s instead of\n * regular values to support animations.\n */\nexport const ArcShape = <Datum extends DatumWithArcAndColor>({\n    datum,\n    style,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: ArcShapeProps<Datum>) => {\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onClick?.(datum, event),\n        [onClick, datum]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseEnter?.(datum, event),\n        [onMouseEnter, datum]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseMove?.(datum, event),\n        [onMouseMove, datum]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseLeave?.(datum, event),\n        [onMouseLeave, datum]\n    )\n\n    return (\n        <animated.path\n            d={style.path}\n            opacity={style.opacity}\n            fill={datum.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            onClick={onClick ? handleClick : undefined}\n            onMouseEnter={onMouseEnter ? handleMouseEnter : undefined}\n            onMouseMove={onMouseMove ? handleMouseMove : undefined}\n            onMouseLeave={onMouseLeave ? handleMouseLeave : undefined}\n        />\n    )\n}\n", "import { to, SpringValue } from '@react-spring/web'\nimport { ArcGenerator } from './types'\n\n/**\n * Directly animating paths for arcs leads to sub-optimal results\n * as the interpolation is going to be linear while we deal with polar coordinates,\n * this interpolator is going to generate proper arc transitions.\n * It should be used with the `useAnimatedArc` or `useArcsTransition` hooks.\n */\nexport const interpolateArc = (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>,\n    arcGenerator: ArcGenerator\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return arcGenerator({\n                startAngle,\n                endAngle,\n                innerRadius: Math.max(0, innerRadius),\n                outerRadius: Math.max(0, outerRadius),\n            })\n        }\n    )\n", "import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { DatumWithArc } from './types'\nimport { ArcTransitionMode, useArcTransitionMode, TransitionExtra } from './arcTransitionMode'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a group of arcs,\n * if you want to animate a single arc,\n * please have a look at the `useAnimatedArc` hook.\n */\nexport const useArcsTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArc,\n    }\n}\n", "import { createElement } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, ArcGenerator } from './types'\nimport { useArcsTransition } from './useArcsTransition'\nimport { ArcTransitionMode } from './arcTransitionMode'\nimport { ArcMouseHandler, ArcShape, ArcShapeProps } from './ArcShape'\n\nexport type ArcComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcShapeProps<Datum>\n) => JSX.Element\n\ninterface ArcsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    borderColor: InheritedColorConfig<Datum>\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n    transitionMode: ArcTransitionMode\n    component?: ArcComponent<Datum>\n}\n\nexport const ArcsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n    component = ArcShape,\n}: ArcsLayerProps<Datum>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<Datum>(borderColor, theme)\n\n    const { transition, interpolate } = useArcsTransition<\n        Datum,\n        {\n            opacity: number\n            color: string\n            borderColor: string\n        }\n    >(data, transitionMode, {\n        enter: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        update: datum => ({\n            opacity: 1,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        leave: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n    })\n\n    const Arc: ArcComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Arc, {\n                    key: datum.id,\n                    datum,\n                    style: {\n                        ...transitionProps,\n                        borderWidth,\n                        path: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            arcGenerator\n                        ),\n                    },\n                    onClick,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                })\n            })}\n        </g>\n    )\n}\n", "import { positionFromAngle, degreesToRadians } from '@nivo/core'\n\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n */\nexport const computeArcBoundingBox = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    // in degrees\n    startAngle: number,\n    // in degrees\n    endAngle: number,\n    includeCenter = true\n) => {\n    let points: [number, number][] = []\n\n    const p0 = positionFromAngle(degreesToRadians(startAngle), radius)\n    points.push([p0.x, p0.y])\n\n    const p1 = positionFromAngle(degreesToRadians(endAngle), radius)\n    points.push([p1.x, p1.y])\n\n    for (\n        let angle = Math.round(Math.min(startAngle, endAngle));\n        angle <= Math.round(Math.max(startAngle, endAngle));\n        angle++\n    ) {\n        if (angle % 90 === 0) {\n            const p = positionFromAngle(degreesToRadians(angle), radius)\n            points.push([p.x, p.y])\n        }\n    }\n\n    points = points.map(([x, y]) => [centerX + x, centerY + y])\n    if (includeCenter) {\n        points.push([centerX, centerY])\n    }\n\n    const xs = points.map(([x]) => x)\n    const ys = points.map(([, y]) => y)\n\n    const x0 = Math.min(...xs)\n    const x1 = Math.max(...xs)\n\n    const y0 = Math.min(...ys)\n    const y1 = Math.max(...ys)\n\n    return {\n        points,\n        x: x0,\n        y: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n    }\n}\n", "import { getDistance, getAngle } from '@nivo/core'\nimport { Arc } from './types'\n\n/**\n * Check if cursor is in given ring.\n */\nexport const isCursorInRing = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    cursorX: number,\n    cursorY: number\n) => {\n    const distance = getDistance(cursorX, cursorY, centerX, centerY)\n\n    return distance < radius && distance > innerRadius\n}\n\n/**\n * Search for an arc being under cursor.\n */\nexport const findArcUnderCursor = <A extends Arc = Arc>(\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    arcs: A[],\n    cursorX: number,\n    cursorY: number\n): A | undefined => {\n    if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) {\n        return undefined\n    }\n\n    const cursorAngle = getAngle(cursorX, cursorY, centerX, centerY)\n\n    return arcs.find(\n        ({ startAngle, endAngle }) => cursorAngle >= startAngle && cursorAngle < endAngle\n    )\n}\n", "import { useSpring } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { Arc, ArcGenerator } from './types'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a single arc,\n * if you want to animate a group of arcs,\n * please have a look at the `useArcsTransition` hook.\n */\nexport const useAnimatedArc = (datumWithArc: { arc: Arc }, arcGenerator: ArcGenerator) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedValues = useSpring({\n        startAngle: datumWithArc.arc.startAngle,\n        endAngle: datumWithArc.arc.endAngle,\n        innerRadius: datumWithArc.arc.innerRadius,\n        outerRadius: datumWithArc.arc.outerRadius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        ...animatedValues,\n        path: interpolateArc(\n            animatedValues.startAngle,\n            animatedValues.endAngle,\n            animatedValues.innerRadius,\n            animatedValues.outerRadius,\n            arcGenerator\n        ),\n    }\n}\n", "import { useMemo } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { ArcGenerator, Arc } from './types'\n\n/**\n * Memoize a d3 arc generator.\n *\n * Please note that both inner/outer radius aren't static\n * and should come from the arc itself, while it requires\n * more props on the arcs, it provides more flexibility\n * because it's not limited to pie then but can also work\n * with charts such as sunbursts.\n */\nexport const useArcGenerator = ({\n    cornerRadius = 0,\n    padAngle = 0,\n}: {\n    cornerRadius?: number\n    padAngle?: number\n} = {}): ArcGenerator =>\n    useMemo(\n        () =>\n            d3Arc<Arc>()\n                .innerRadius(arc => arc.innerRadius)\n                .outerRadius(arc => arc.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(padAngle),\n        [cornerRadius, padAngle]\n    )\n", "import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, DatumId, LegendDatum } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: LegendDatum<RawDatum>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nexport const PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i: number) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n", "import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    layers: ['arcs', 'arcLinkLabels', 'arcLabels', 'legends'],\n\n    // layout\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n\n    // border\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    // arc labels\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n\n    // arc link labels\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n\n    tooltip: PieTooltip,\n\n    legends: [],\n\n    role: 'img',\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n", "import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n", "import { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport {\n    MayHaveLabel,\n    CompletePieSvgProps,\n    ComputedDatum,\n    DatumId,\n    PieArc,\n    PieCustomLayerProps,\n    LegendDatum,\n    CommonPieProps,\n} from './types'\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: readonly RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    hidden: false,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n    hiddenIds,\n    forwardLegendData,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n    hiddenIds: DatumId[]\n    forwardLegendData?: CommonPieProps<RawDatum>['forwardLegendData']\n}): {\n    dataWithArc: Omit<ComputedDatum<RawDatum>, 'fill'>[]\n    legendData: LegendDatum<RawDatum>[]\n} => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    const result = useMemo(() => {\n        const hiddenData = data.filter(item => !hiddenIds.includes(item.id))\n        const dataWithArc = pie(hiddenData).map(\n            (\n                arc: Omit<\n                    PieArc,\n                    'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                > & {\n                    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                }\n            ) => {\n                const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                return {\n                    ...arc.data,\n                    arc: {\n                        index: arc.index,\n                        startAngle: arc.startAngle,\n                        endAngle: arc.endAngle,\n                        innerRadius:\n                            activeId === arc.data.id\n                                ? innerRadius - activeInnerRadiusOffset\n                                : innerRadius,\n                        outerRadius:\n                            activeId === arc.data.id\n                                ? outerRadius + activeOuterRadiusOffset\n                                : outerRadius,\n                        thickness: outerRadius - innerRadius,\n                        padAngle: arc.padAngle,\n                        angle,\n                        angleDeg: radiansToDegrees(angle),\n                    },\n                }\n            }\n        )\n        const legendData: LegendDatum<RawDatum>[] = data.map(item => ({\n            id: item.id,\n            label: item.label,\n            color: item.color,\n            hidden: hiddenIds.includes(item.id),\n            data: item,\n        }))\n\n        return { dataWithArc, legendData }\n    }, [\n        pie,\n        data,\n        hiddenIds,\n        activeId,\n        innerRadius,\n        activeInnerRadiusOffset,\n        outerRadius,\n        activeOuterRadiusOffset,\n    ])\n\n    // Forward the legends data if `forwardLegendData` is defined.\n    const legendData = result.legendData\n    const forwardLegendDataRef = useRef(forwardLegendData)\n    useEffect(() => {\n        if (typeof forwardLegendDataRef.current !== 'function') return\n        forwardLegendDataRef.current(legendData)\n    }, [forwardLegendDataRef, legendData])\n\n    return result\n}\n\n/**\n * Encapsulate the logic for defining/reading the active arc ID,\n * which can be either controlled (handled externally), or uncontrolled\n * (handled internally), we can optionally define a default value when\n * it's uncontrolled.\n */\nconst useActiveId = ({\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId = null,\n}: {\n    activeId?: DatumId | null\n    onActiveIdChange?: (id: DatumId | null) => void\n    defaultActiveId?: DatumId | null\n}) => {\n    const isControlled = typeof activeIdFromProps != 'undefined'\n\n    const [internalActiveId, setInternalActiveId] = useState<DatumId | null>(\n        !isControlled ? defaultActiveId : null\n    )\n\n    const activeId = isControlled ? activeIdFromProps : internalActiveId\n\n    const setActiveId = useCallback(\n        (id: DatumId | null) => {\n            if (onActiveIdChange) {\n                onActiveIdChange(id)\n            }\n\n            if (!isControlled) {\n                setInternalActiveId(id)\n            }\n        },\n        [isControlled, onActiveIdChange, setInternalActiveId]\n    )\n\n    return { activeId, setActiveId }\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    forwardLegendData,\n}: Pick<\n    Partial<CompletePieSvgProps<RawDatum>>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n    | 'activeId'\n    | 'onActiveIdChange'\n    | 'defaultActiveId'\n    | 'forwardLegendData'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const { activeId, setActiveId } = useActiveId({\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n    })\n\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n        forwardLegendData,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { ...pieArcs, arcGenerator, setActiveId, toggleSerie }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n    forwardLegendData,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> &\n    Pick<\n        Partial<CompletePieSvgProps<RawDatum>>,\n        'activeId' | 'onActiveIdChange' | 'defaultActiveId' | 'forwardLegendData'\n    > & {\n        data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    }) => {\n    const { activeId, setActiveId } = useActiveId({\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n    })\n\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit])\n\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n        forwardLegendData,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        arcGenerator,\n        activeId,\n        setActiveId,\n        toggleSerie,\n        ...pieArcs,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: PieCustomLayerProps<RawDatum>): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n", "import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter, tooltip])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove, tooltip])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n", "import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { PieLegends } from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    forwardLegendData,\n\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        activeId: activeIdFromProps,\n        onActiveIdChange,\n        defaultActiveId,\n        forwardLegendData,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcs: null,\n        arcLinkLabels: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum extends MayHaveLabel>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps, MayHaveLabel } from './types'\n\nexport const ResponsivePie = <RawDatum extends MayHaveLabel>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { createElement, useEffect, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    Arc,\n    findArcUnderCursor,\n    useArcLabels,\n    drawCanvasArcLabels,\n    useArcLinkLabels,\n    drawCanvasArcLinkLabels,\n} from '@nivo/arcs'\nimport { useNormalizedData, usePieFromBox } from './hooks'\nimport { ComputedDatum, PieCanvasProps, MayHaveLabel } from './types'\nimport { defaultProps } from './props'\n\nconst InnerPieCanvas = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = defaultProps.pixelRatio,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n    activeId: activeIdFromProps,\n    onActiveIdChange,\n    defaultActiveId,\n\n    legends = defaultProps.legends,\n    forwardLegendData,\n}: PieCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const { dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius, setActiveId } =\n        usePieFromBox<RawDatum>({\n            data: normalizedData,\n            width: innerWidth,\n            height: innerHeight,\n            fit,\n            innerRadius: innerRadiusRatio,\n            startAngle,\n            endAngle,\n            padAngle,\n            sortByValue,\n            cornerRadius,\n            activeInnerRadiusOffset,\n            activeOuterRadiusOffset,\n            activeId: activeIdFromProps,\n            onActiveIdChange,\n            defaultActiveId,\n            forwardLegendData,\n        })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const arcLabels = useArcLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        label: arcLabel,\n        skipAngle: arcLabelsSkipAngle,\n        offset: arcLabelsRadiusOffset,\n        textColor: arcLabelsTextColor,\n    })\n\n    const arcLinkLabels = useArcLinkLabels<ComputedDatum<RawDatum>>({\n        data: dataWithArc,\n        skipAngle: arcLinkLabelsSkipAngle,\n        offset: arcLinkLabelsOffset,\n        diagonalLength: arcLinkLabelsDiagonalLength,\n        straightLength: arcLinkLabelsStraightLength,\n        label: arcLinkLabel,\n        linkColor: arcLinkLabelsColor,\n        textOffset: arcLinkLabelsTextOffset,\n        textColor: arcLinkLabelsTextColor,\n    })\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n        arcGenerator.context(ctx)\n\n        ctx.save()\n        ctx.translate(centerX, centerY)\n\n        dataWithArc.forEach(arc => {\n            ctx.beginPath()\n            ctx.fillStyle = arc.color\n\n            ctx.strokeStyle = getBorderColor(arc)\n            ctx.lineWidth = borderWidth\n\n            arcGenerator(arc.arc)\n\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableArcLinkLabels === true) {\n            drawCanvasArcLinkLabels<ComputedDatum<RawDatum>>(\n                ctx,\n                arcLinkLabels,\n                theme,\n                arcLinkLabelsThickness\n            )\n        }\n\n        if (enableArcLabels === true) {\n            drawCanvasArcLabels<ComputedDatum<RawDatum>>(ctx, arcLabels, theme)\n        }\n\n        // legends assume a box rather than a center,\n        // that's why we restore previously saved position here.\n        ctx.restore()\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: dataWithArc,\n                containerWidth: innerWidth,\n                containerHeight: innerHeight,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        centerX,\n        centerY,\n        arcGenerator,\n        dataWithArc,\n        borderWidth,\n        getBorderColor,\n        enableArcLabels,\n        arcLabels,\n        enableArcLinkLabels,\n        arcLinkLabels,\n        arcLinkLabelsThickness,\n        legends,\n        theme,\n    ])\n\n    const arcs = useMemo(\n        () =>\n            dataWithArc.map(datum => ({\n                id: datum.id,\n                ...datum.arc,\n            })),\n        [dataWithArc]\n    )\n\n    const getArcFromMouse = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!canvasEl.current) return null\n\n        const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n        const hoveredArc = findArcUnderCursor<Arc & { id: string | number }>(\n            margin.left + centerX,\n            margin.top + centerY,\n            radius,\n            innerRadius,\n            arcs,\n            x,\n            y\n        )\n\n        if (!hoveredArc) return null\n\n        return dataWithArc.find(datum => datum.id === hoveredArc.id)\n    }\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        const datum = getArcFromMouse(event)\n        if (datum) {\n            onMouseMove?.(datum, event)\n            setActiveId(datum.id)\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n        } else {\n            setActiveId(null)\n            hideTooltip()\n        }\n    }\n\n    const handleMouseLeave = () => {\n        hideTooltip()\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n        if (!onClick) return\n\n        const arc = getArcFromMouse(event)\n        if (arc) {\n            onClick(arc, event)\n        }\n    }\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const PieCanvas = <RawDatum extends MayHaveLabel>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerPieCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { PieCanvas } from './PieCanvas'\nimport { PieCanvasProps, MayHaveLabel } from './types'\n\nexport const ResponsivePieCanvas = <RawDatum extends MayHaveLabel>(\n    props: Omit<PieCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <PieCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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",
  "names": ["staticStyle", "pointerEvents", "ArcLabel", "_ref", "label", "style", "theme", "useTheme", "_jsx", "animated", "g", "transform", "opacity", "progress", "children", "text", "textAnchor", "dominantBaseline", "_extends", "labels", "fill", "textColor", "getNormalizedAngle", "angle", "normalizedAngle", "Math", "PI", "filterDataBySkipAngle", "data", "skipAngle", "filter", "datum", "abs", "radiansToDegrees", "arc", "endAngle", "startAngle", "arcTransitionModeById", "startAngle", "enter", "arc", "_extends", "endAngle", "update", "leave", "middleAngle", "innerRadius", "outerRadius", "centerRadius", "pushIn", "pushOut", "useArcTransitionMode", "mode", "extraTransition", "useMemo", "transitionMode", "datum", "progress", "computeArcCenter", "offset", "angle", "midAngle", "Math", "PI", "radius", "positionFromAngle", "interpolateArcCenter", "startAngleValue", "endAngleValue", "innerRadiusValue", "outerRadiusValue", "to", "centroid", "x", "y", "useArcCentersTransition", "data", "extra", "_useMotionConfig", "useMotionConfig", "animate", "springConfig", "config", "phases", "transition", "useTransition", "keys", "id", "initial", "from", "immediate", "interpolate", "useArcCenters", "_ref", "_ref$offset", "_ref$skipAngle", "skipAngle", "_ref$computeExtraProp", "computeExtraProps", "filterDataBySkipAngle", "map", "position", "ArcLabelsLayer", "center", "labelAccessor", "label", "radiusOffset", "textColor", "_ref$component", "component", "ArcLabel", "getLabel", "usePropertyAccessor", "theme", "useTheme", "getTextColor", "useInheritedColor", "filteredData", "filter", "abs", "radiansToDegrees", "_useArcCentersTransit", "Label", "_jsx", "transform", "children", "transitionProps", "createElement", "key", "style", "drawCanvasArcLabels", "ctx", "labels", "textAlign", "textBaseline", "font", "text", "fontSize", "fontFamily", "forEach", "fillStyle", "fillText", "useArcLabels", "useCallback", "ArcLinkLabel", "_ref", "label", "style", "theme", "useTheme", "_jsxs", "animated", "g", "opacity", "children", "_jsx", "path", "fill", "stroke", "linkColor", "strokeWidth", "thickness", "d", "text", "transform", "textPosition", "textAnchor", "dominantBaseline", "_extends", "labels", "textColor", "computeArcLinkTextAnchor", "arc", "centerAngle", "getNormalizedAngle", "startAngle", "endAngle", "Math", "PI", "computeArcLink", "offset", "diagonalLength", "straightLength", "side", "point2", "point0", "positionFromAngle", "outerRadius", "point1", "x", "y", "points", "lineGenerator", "line", "interpolateLink", "startAngleValue", "endAngleValue", "innerRadiusValue", "outerRadiusValue", "offsetValue", "diagonalLengthValue", "straightLengthValue", "to", "innerRadius", "diagonalLengthAnimated", "straightLengthAnimated", "interpolateTextAnchor", "interpolateTextPosition", "textOffsetValue", "textOffset", "_computeArcLink2", "position", "useArcLinkLabelsTransition", "_ref2", "data", "_ref2$offset", "_ref2$skipAngle", "skipAngle", "_useMotionConfig", "useMotionConfig", "animate", "springConfig", "config", "getLinkColor", "useInheritedColor", "getTextColor", "filteredData", "useMemo", "filterDataBySkipAngle", "transitionPhases", "enter", "datum", "update", "leave", "transition", "useTransition", "keys", "id", "initial", "from", "immediate", "ArcLinkLabelsLayer", "center", "labelAccessor", "_ref$component", "component", "getLabel", "usePropertyAccessor", "_useArcLinkLabelsTran", "Label", "transitionProps", "createElement", "key", "drawCanvasArcLinkLabels", "ctx", "textBaseline", "font", "fontSize", "fontFamily", "forEach", "fillStyle", "textAlign", "textPropsByEngine", "canvas", "align", "fillText", "beginPath", "strokeStyle", "lineWidth", "point", "index", "moveTo", "lineTo", "useArcLinks", "_ref$skipAngle", "_ref$offset", "_ref$computeExtraProp", "computeExtraProps", "links", "filter", "abs", "radiansToDegrees", "map", "link", "useArcLinkLabels", "_ref$textOffset", "useCallback", "ArcShape", "_ref", "datum", "style", "onClick", "onMouseEnter", "onMouseMove", "onMouseLeave", "handleClick", "useCallback", "event", "handleMouseEnter", "handleMouseMove", "handleMouseLeave", "_jsx", "animated", "path", "d", "opacity", "fill", "color", "stroke", "borderColor", "strokeWidth", "borderWidth", "undefined", "interpolateArc", "startAngleValue", "endAngleValue", "innerRadiusValue", "outerRadiusValue", "arcGenerator", "to", "startAngle", "endAngle", "innerRadius", "outerRadius", "Math", "max", "useArcsTransition", "data", "mode", "extra", "_useMotionConfig", "useMotionConfig", "animate", "springConfig", "config", "phases", "useArcTransitionMode", "transition", "useTransition", "keys", "id", "initial", "update", "from", "enter", "leave", "immediate", "interpolate", "ArcsLayer", "center", "transitionMode", "_ref$component", "component", "theme", "useTheme", "getBorderColor", "useInheritedColor", "_useArcsTransition", "Arc", "transform", "children", "transitionProps", "createElement", "key", "_extends", "computeArcBoundingBox", "centerX", "centerY", "radius", "includeCenter", "points", "p0", "positionFromAngle", "degreesToRadians", "push", "x", "y", "p1", "angle", "round", "min", "p", "map", "xs", "_ref2", "ys", "_ref3", "x0", "apply", "x1", "y0", "width", "height", "isCursorInRing", "cursorX", "cursorY", "distance", "getDistance", "findArcUnderCursor", "arcs", "cursorAngle", "getAngle", "find", "useArcGenerator", "_temp", "_ref", "_ref$cornerRadius", "cornerRadius", "_ref$padAngle", "padAngle", "useMemo", "d3Arc", "innerRadius", "arc", "outerRadius", "H", "PieLegends", "_ref", "width", "height", "legends", "data", "toggleSerie", "_jsx", "_Fragment", "children", "map", "legend", "i", "_legend$data", "BoxLegendSvg", "_extends", "containerWidth", "containerHeight", "undefined", "defaultProps", "id", "value", "sortByValue", "innerRadius", "padAngle", "cornerRadius", "layers", "startAngle", "endAngle", "fit", "activeInnerRadiusOffset", "activeOuterRadiusOffset", "borderWidth", "borderColor", "from", "modifiers", "enableArcLabels", "arcLabel", "arcLabelsSkipAngle", "arcLabelsRadiusOffset", "arcLabelsTextColor", "theme", "enableArcLinkLabels", "arcLinkLabel", "arcLinkLabelsSkipAngle", "arcLinkLabelsOffset", "arcLinkLabelsDiagonalLength", "arcLinkLabelsStraightLength", "arcLinkLabelsThickness", "arcLinkLabelsTextOffset", "arcLinkLabelsTextColor", "arcLinkLabelsColor", "colors", "scheme", "defs", "fill", "isInteractive", "animate", "motionConfig", "transitionMode", "tooltip", "datum", "BasicTooltip", "formattedValue", "enableChip", "color", "role", "pixelRatio", "window", "_window$devicePixelRa", "devicePixelRatio", "j", "useNormalizedData", "_ref$id", "_ref$value", "valueFormat", "_ref$colors", "getId", "usePropertyAccessor", "getValue", "formatValue", "useValueFormatter", "getColor", "useOrdinalColorScale", "useMemo", "_datum$label", "datumId", "datumValue", "normalizedDatum", "label", "hidden", "usePieArcs", "_ref2", "outerRadius", "activeId", "hiddenIds", "forwardLegendData", "pie", "innerPie", "d3Pie", "d", "degreesToRadians", "sortValues", "result", "hiddenData", "filter", "item", "includes", "dataWithArc", "arc", "angle", "Math", "abs", "index", "thickness", "angleDeg", "radiansToDegrees", "legendData", "forwardLegendDataRef", "useRef", "useEffect", "current", "useActiveId", "_ref3", "activeIdFromProps", "onActiveIdChange", "_ref3$defaultActiveId", "defaultActiveId", "isControlled", "_useState", "useState", "internalActiveId", "setInternalActiveId", "setActiveId", "useCallback", "usePie", "_ref4", "radius", "_ref4$startAngle", "_ref4$endAngle", "_ref4$padAngle", "_ref4$sortByValue", "_ref4$cornerRadius", "_ref4$activeInnerRadi", "_ref4$activeOuterRadi", "_useActiveId", "_useState2", "setHiddenIds", "pieArcs", "state", "indexOf", "concat", "arcGenerator", "useArcGenerator", "usePieFromBox", "_ref5", "_ref5$innerRadius", "innerRadiusRatio", "_ref5$startAngle", "_ref5$endAngle", "_ref5$padAngle", "_ref5$sortByValue", "_ref5$cornerRadius", "_ref5$fit", "_ref5$activeInnerRadi", "_ref5$activeOuterRadi", "_useActiveId2", "_useState3", "computedProps", "boundingBox", "min", "centerX", "centerY", "_computeArcBoundingBo", "computeArcBoundingBox", "points", "box", "_objectWithoutPropertiesLoose", "_excluded", "ratio", "adjustedBox", "x", "y", "debug", "usePieLayerContext", "_ref6", "Arcs", "center", "onClick", "onMouseEnter", "onMouseMove", "onMouseLeave", "_useTooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "handleClick", "event", "handleMouseEnter", "createElement", "handleMouseMove", "handleMouseLeave", "ArcsLayer", "U", "InnerPie", "_ref$sortByValue", "_ref$layers", "_ref$startAngle", "_ref$endAngle", "_ref$padAngle", "_ref$fit", "_ref$innerRadius", "_ref$cornerRadius", "_ref$activeInnerRadiu", "_ref$activeOuterRadiu", "partialMargin", "margin", "_ref$borderWidth", "_ref$borderColor", "_ref$enableArcLabels", "_ref$arcLabel", "_ref$arcLabelsSkipAng", "_ref$arcLabelsTextCol", "_ref$arcLabelsRadiusO", "arcLabelsComponent", "_ref$enableArcLinkLab", "_ref$arcLinkLabel", "_ref$arcLinkLabelsSki", "_ref$arcLinkLabelsOff", "_ref$arcLinkLabelsDia", "_ref$arcLinkLabelsStr", "_ref$arcLinkLabelsThi", "_ref$arcLinkLabelsTex", "_ref$arcLinkLabelsTex2", "_ref$arcLinkLabelsCol", "arcLinkLabelComponent", "_ref$defs", "_ref$fill", "_ref$isInteractive", "_ref$tooltip", "_ref$transitionMode", "_ref$legends", "_ref$role", "_useDimensions", "useDimensions", "outerWidth", "outerHeight", "innerWidth", "innerHeight", "normalizedData", "_usePieFromBox", "boundDefs", "bindDefs", "layerById", "arcs", "arcLinkLabels", "arcLabels", "ArcLinkLabelsLayer", "skipAngle", "offset", "diagonalLength", "straightLength", "strokeWidth", "textOffset", "textColor", "linkColor", "component", "ArcLabelsLayer", "radiusOffset", "length", "layerContext", "SvgWrapper", "layer", "Fragment", "Pie", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "otherProps", "Container", "ResponsivePie", "props", "ResponsiveWrapper", "InnerPieCanvas", "_ref$pixelRatio", "canvasEl", "useTheme", "getBorderColor", "useInheritedColor", "useArcLabels", "useArcLinkLabels", "ctx", "getContext", "scale", "fillStyle", "background", "fillRect", "save", "translate", "left", "top", "context", "forEach", "beginPath", "strokeStyle", "lineWidth", "stroke", "drawCanvasArcLinkLabels", "drawCanvasArcLabels", "restore", "renderLegendToCanvas", "getArcFromMouse", "_getRelativeCursor", "getRelativeCursor", "hoveredArc", "findArcUnderCursor", "find", "handleMouseHover", "ref", "style", "cursor", "PieCanvas", "ResponsivePieCanvas"]
}
