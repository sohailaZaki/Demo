import {
  D,
  X,
  dn,
  j,
  w as w2,
  z
} from "./chunk-DS2PXLSE.js";
import {
  $r,
  Bt,
  C,
  Dt,
  Et,
  Gi,
  H,
  Jt,
  Li,
  Oi,
  P,
  Pi,
  Qr,
  T,
  Ti,
  Ui,
  Vi,
  We,
  X as X2,
  Xe,
  Xi,
  Zr,
  animated,
  area_default,
  bt,
  g,
  k,
  line_default,
  mt,
  pr,
  require_toString,
  useSpring,
  w,
  yt,
  zt
} from "./chunk-3336PF65.js";
import "./chunk-3GS3N7PG.js";
import {
  require_prop_types
} from "./chunk-44UFIAHL.js";
import {
  require_jsx_runtime
} from "./chunk-KHN7SQKI.js";
import {
  require_react
} from "./chunk-LL6ON2IQ.js";
import {
  __commonJS,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/lodash/uniqueId.js
var require_uniqueId = __commonJS({
  "node_modules/lodash/uniqueId.js"(exports, module) {
    var toString = require_toString();
    var idCounter = 0;
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }
    module.exports = uniqueId;
  }
});

// node_modules/@nivo/line/dist/nivo-line.es.js
var import_react2 = __toESM(require_react());
var import_uniqueId = __toESM(require_uniqueId());
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());

// node_modules/@nivo/voronoi/dist/nivo-voronoi.es.js
var import_react = __toESM(require_react());

// node_modules/delaunator/index.js
var EPSILON = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);
var Delaunator = class _Delaunator {
  static from(points, getX = defaultGetX, getY = defaultGetY) {
    const n3 = points.length;
    const coords = new Float64Array(n3 * 2);
    for (let i3 = 0; i3 < n3; i3++) {
      const p2 = points[i3];
      coords[2 * i3] = getX(p2);
      coords[2 * i3 + 1] = getY(p2);
    }
    return new _Delaunator(coords);
  }
  constructor(coords) {
    const n3 = coords.length >> 1;
    if (n3 > 0 && typeof coords[0] !== "number")
      throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n3 - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n3));
    this._hullPrev = new Uint32Array(n3);
    this._hullNext = new Uint32Array(n3);
    this._hullTri = new Uint32Array(n3);
    this._hullHash = new Int32Array(this._hashSize).fill(-1);
    this._ids = new Uint32Array(n3);
    this._dists = new Float64Array(n3);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n3 = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i3 = 0; i3 < n3; i3++) {
      const x = coords[2 * i3];
      const y = coords[2 * i3 + 1];
      if (x < minX)
        minX = x;
      if (y < minY)
        minY = y;
      if (x > maxX)
        maxX = x;
      if (y > maxY)
        maxY = y;
      this._ids[i3] = i3;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY) / 2;
    let minDist = Infinity;
    let i0, i1, i22;
    for (let i3 = 0; i3 < n3; i3++) {
      const d = dist(cx, cy, coords[2 * i3], coords[2 * i3 + 1]);
      if (d < minDist) {
        i0 = i3;
        minDist = d;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    minDist = Infinity;
    for (let i3 = 0; i3 < n3; i3++) {
      if (i3 === i0)
        continue;
      const d = dist(i0x, i0y, coords[2 * i3], coords[2 * i3 + 1]);
      if (d < minDist && d > 0) {
        i1 = i3;
        minDist = d;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i3 = 0; i3 < n3; i3++) {
      if (i3 === i0 || i3 === i1)
        continue;
      const r3 = circumradius(i0x, i0y, i1x, i1y, coords[2 * i3], coords[2 * i3 + 1]);
      if (r3 < minRadius) {
        i22 = i3;
        minRadius = r3;
      }
    }
    let i2x = coords[2 * i22];
    let i2y = coords[2 * i22 + 1];
    if (minRadius === Infinity) {
      for (let i3 = 0; i3 < n3; i3++) {
        this._dists[i3] = coords[2 * i3] - coords[0] || coords[2 * i3 + 1] - coords[1];
      }
      quicksort(this._ids, this._dists, 0, n3 - 1);
      const hull = new Uint32Array(n3);
      let j2 = 0;
      for (let i3 = 0, d0 = -Infinity; i3 < n3; i3++) {
        const id = this._ids[i3];
        if (this._dists[id] > d0) {
          hull[j2++] = id;
          d0 = this._dists[id];
        }
      }
      this.hull = hull.subarray(0, j2);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
      const i3 = i1;
      const x = i1x;
      const y = i1y;
      i1 = i22;
      i1x = i2x;
      i1y = i2y;
      i22 = i3;
      i2x = x;
      i2y = y;
    }
    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;
    for (let i3 = 0; i3 < n3; i3++) {
      this._dists[i3] = dist(coords[2 * i3], coords[2 * i3 + 1], center.x, center.y);
    }
    quicksort(this._ids, this._dists, 0, n3 - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i22] = i1;
    hullNext[i1] = hullPrev[i0] = i22;
    hullNext[i22] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i22] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i22;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i22, -1, -1, -1);
    for (let k3 = 0, xp, yp; k3 < this._ids.length; k3++) {
      const i3 = this._ids[k3];
      const x = coords[2 * i3];
      const y = coords[2 * i3 + 1];
      if (k3 > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON)
        continue;
      xp = x;
      yp = y;
      if (i3 === i0 || i3 === i1 || i3 === i22)
        continue;
      let start = 0;
      for (let j2 = 0, key = this._hashKey(x, y); j2 < this._hashSize; j2++) {
        start = hullHash[(key + j2) % this._hashSize];
        if (start !== -1 && start !== hullNext[start])
          break;
      }
      start = hullPrev[start];
      let e3 = start, q;
      while (q = hullNext[e3], !orient(x, y, coords[2 * e3], coords[2 * e3 + 1], coords[2 * q], coords[2 * q + 1])) {
        e3 = q;
        if (e3 === start) {
          e3 = -1;
          break;
        }
      }
      if (e3 === -1)
        continue;
      let t3 = this._addTriangle(e3, i3, hullNext[e3], -1, -1, hullTri[e3]);
      hullTri[i3] = this._legalize(t3 + 2);
      hullTri[e3] = t3;
      hullSize++;
      let n4 = hullNext[e3];
      while (q = hullNext[n4], orient(x, y, coords[2 * n4], coords[2 * n4 + 1], coords[2 * q], coords[2 * q + 1])) {
        t3 = this._addTriangle(n4, i3, q, hullTri[i3], -1, hullTri[n4]);
        hullTri[i3] = this._legalize(t3 + 2);
        hullNext[n4] = n4;
        hullSize--;
        n4 = q;
      }
      if (e3 === start) {
        while (q = hullPrev[e3], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e3], coords[2 * e3 + 1])) {
          t3 = this._addTriangle(q, i3, e3, -1, hullTri[e3], hullTri[q]);
          this._legalize(t3 + 2);
          hullTri[q] = t3;
          hullNext[e3] = e3;
          hullSize--;
          e3 = q;
        }
      }
      this._hullStart = hullPrev[i3] = e3;
      hullNext[e3] = hullPrev[n4] = i3;
      hullNext[i3] = n4;
      hullHash[this._hashKey(x, y)] = i3;
      hullHash[this._hashKey(coords[2 * e3], coords[2 * e3 + 1])] = e3;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i3 = 0, e3 = this._hullStart; i3 < hullSize; i3++) {
      this.hull[i3] = e3;
      e3 = hullNext[e3];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x, y) {
    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a2) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i3 = 0;
    let ar = 0;
    while (true) {
      const b2 = halfedges[a2];
      const a0 = a2 - a2 % 3;
      ar = a0 + (a2 + 2) % 3;
      if (b2 === -1) {
        if (i3 === 0)
          break;
        a2 = EDGE_STACK[--i3];
        continue;
      }
      const b0 = b2 - b2 % 3;
      const al = a0 + (a2 + 1) % 3;
      const bl = b0 + (b2 + 2) % 3;
      const p0 = triangles[ar];
      const pr2 = triangles[a2];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle(
        coords[2 * p0],
        coords[2 * p0 + 1],
        coords[2 * pr2],
        coords[2 * pr2 + 1],
        coords[2 * pl],
        coords[2 * pl + 1],
        coords[2 * p1],
        coords[2 * p1 + 1]
      );
      if (illegal) {
        triangles[a2] = p1;
        triangles[b2] = p0;
        const hbl = halfedges[bl];
        if (hbl === -1) {
          let e3 = this._hullStart;
          do {
            if (this._hullTri[e3] === bl) {
              this._hullTri[e3] = a2;
              break;
            }
            e3 = this._hullPrev[e3];
          } while (e3 !== this._hullStart);
        }
        this._link(a2, hbl);
        this._link(b2, halfedges[ar]);
        this._link(ar, bl);
        const br = b0 + (b2 + 1) % 3;
        if (i3 < EDGE_STACK.length) {
          EDGE_STACK[i3++] = br;
        }
      } else {
        if (i3 === 0)
          break;
        a2 = EDGE_STACK[--i3];
      }
    }
    return ar;
  }
  _link(a2, b2) {
    this._halfedges[a2] = b2;
    if (b2 !== -1)
      this._halfedges[b2] = a2;
  }
  // add a new triangle given vertex indices and adjacent half-edge ids
  _addTriangle(i0, i1, i22, a2, b2, c) {
    const t3 = this.trianglesLen;
    this._triangles[t3] = i0;
    this._triangles[t3 + 1] = i1;
    this._triangles[t3 + 2] = i22;
    this._link(t3, a2);
    this._link(t3 + 1, b2);
    this._link(t3 + 2, c);
    this.trianglesLen += 3;
    return t3;
  }
};
function pseudoAngle(dx, dy) {
  const p2 = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p2 : 1 + p2) / 4;
}
function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function orientIfSure(px, py, rx, ry, qx, qy) {
  const l2 = (ry - py) * (qx - px);
  const r3 = (rx - px) * (qy - py);
  return Math.abs(l2 - r3) >= 33306690738754716e-32 * Math.abs(l2 + r3) ? l2 - r3 : 0;
}
function orient(rx, ry, qx, qy, px, py) {
  const sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);
  return sign < 0;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  const dx = ax - px;
  const dy = ay - py;
  const ex = bx - px;
  const ey = by - py;
  const fx = cx - px;
  const fy = cy - py;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = (ey * bl - dy * cl) * d;
  const y = (dx * cl - ex * bl) * d;
  return x * x + y * y;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d = 0.5 / (dx * ey - dy * ex);
  const x = ax + (ey * bl - dy * cl) * d;
  const y = ay + (dx * cl - ex * bl) * d;
  return { x, y };
}
function quicksort(ids, dists, left, right) {
  if (right - left <= 20) {
    for (let i3 = left + 1; i3 <= right; i3++) {
      const temp = ids[i3];
      const tempDist = dists[temp];
      let j2 = i3 - 1;
      while (j2 >= left && dists[ids[j2]] > tempDist)
        ids[j2 + 1] = ids[j2--];
      ids[j2 + 1] = temp;
    }
  } else {
    const median = left + right >> 1;
    let i3 = left + 1;
    let j2 = right;
    swap(ids, median, i3);
    if (dists[ids[left]] > dists[ids[right]])
      swap(ids, left, right);
    if (dists[ids[i3]] > dists[ids[right]])
      swap(ids, i3, right);
    if (dists[ids[left]] > dists[ids[i3]])
      swap(ids, left, i3);
    const temp = ids[i3];
    const tempDist = dists[temp];
    while (true) {
      do
        i3++;
      while (dists[ids[i3]] < tempDist);
      do
        j2--;
      while (dists[ids[j2]] > tempDist);
      if (j2 < i3)
        break;
      swap(ids, i3, j2);
    }
    ids[left + 1] = ids[j2];
    ids[j2] = temp;
    if (right - i3 + 1 >= j2 - left) {
      quicksort(ids, dists, i3, right);
      quicksort(ids, dists, left, j2 - 1);
    } else {
      quicksort(ids, dists, left, j2 - 1);
      quicksort(ids, dists, i3, right);
    }
  }
}
function swap(arr, i3, j2) {
  const tmp = arr[i3];
  arr[i3] = arr[j2];
  arr[j2] = tmp;
}
function defaultGetX(p2) {
  return p2[0];
}
function defaultGetY(p2) {
  return p2[1];
}

// node_modules/d3-delaunay/src/path.js
var epsilon = 1e-6;
var Path = class {
  constructor() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
  }
  moveTo(x, y) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }
  lineTo(x, y) {
    this._ += `L${this._x1 = +x},${this._y1 = +y}`;
  }
  arc(x, y, r3) {
    x = +x, y = +y, r3 = +r3;
    const x0 = x + r3;
    const y0 = y;
    if (r3 < 0)
      throw new Error("negative radius");
    if (this._x1 === null)
      this._ += `M${x0},${y0}`;
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon)
      this._ += "L" + x0 + "," + y0;
    if (!r3)
      return;
    this._ += `A${r3},${r3},0,1,1,${x - r3},${y}A${r3},${r3},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
  }
  rect(x, y, w3, h) {
    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w3}v${+h}h${-w3}Z`;
  }
  value() {
    return this._ || null;
  }
};

// node_modules/d3-delaunay/src/polygon.js
var Polygon = class {
  constructor() {
    this._ = [];
  }
  moveTo(x, y) {
    this._.push([x, y]);
  }
  closePath() {
    this._.push(this._[0].slice());
  }
  lineTo(x, y) {
    this._.push([x, y]);
  }
  value() {
    return this._.length ? this._ : null;
  }
};

// node_modules/d3-delaunay/src/voronoi.js
var Voronoi = class {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin)))
      throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;
    this._init();
  }
  update() {
    this.delaunay.update();
    this._init();
    return this;
  }
  _init() {
    const { delaunay: { points, hull, triangles }, vectors } = this;
    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
    for (let i3 = 0, j2 = 0, n3 = triangles.length, x, y; i3 < n3; i3 += 3, j2 += 2) {
      const t1 = triangles[i3] * 2;
      const t22 = triangles[i3 + 1] * 2;
      const t3 = triangles[i3 + 2] * 2;
      const x12 = points[t1];
      const y12 = points[t1 + 1];
      const x2 = points[t22];
      const y2 = points[t22 + 1];
      const x3 = points[t3];
      const y3 = points[t3 + 1];
      const dx = x2 - x12;
      const dy = y2 - y12;
      const ex = x3 - x12;
      const ey = y3 - y12;
      const bl = dx * dx + dy * dy;
      const cl = ex * ex + ey * ey;
      const ab = (dx * ey - dy * ex) * 2;
      if (!ab) {
        x = (x12 + x3) / 2 - 1e8 * ey;
        y = (y12 + y3) / 2 + 1e8 * ex;
      } else if (Math.abs(ab) < 1e-8) {
        x = (x12 + x3) / 2;
        y = (y12 + y3) / 2;
      } else {
        const d = 1 / ab;
        x = x12 + (ey * bl - dy * cl) * d;
        y = y12 + (dx * cl - ex * bl) * d;
      }
      circumcenters[j2] = x;
      circumcenters[j2 + 1] = y;
    }
    let h = hull[hull.length - 1];
    let p0, p1 = h * 4;
    let x0, x1 = points[2 * h];
    let y0, y1 = points[2 * h + 1];
    vectors.fill(0);
    for (let i3 = 0; i3 < hull.length; ++i3) {
      h = hull[i3];
      p0 = p1, x0 = x1, y0 = y1;
      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
      vectors[p0 + 2] = vectors[p1] = y0 - y1;
      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
    }
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
    if (hull.length <= 1)
      return null;
    for (let i3 = 0, n3 = halfedges.length; i3 < n3; ++i3) {
      const j2 = halfedges[i3];
      if (j2 < i3)
        continue;
      const ti = Math.floor(i3 / 3) * 2;
      const tj = Math.floor(j2 / 3) * 2;
      const xi = circumcenters[ti];
      const yi = circumcenters[ti + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];
      this._renderSegment(xi, yi, xj, yj, context);
    }
    let h0, h1 = hull[hull.length - 1];
    for (let i3 = 0; i3 < hull.length; ++i3) {
      h0 = h1, h1 = hull[i3];
      const t3 = Math.floor(inedges[h1] / 3) * 2;
      const x = circumcenters[t3];
      const y = circumcenters[t3 + 1];
      const v2 = h0 * 4;
      const p2 = this._project(x, y, vectors[v2 + 2], vectors[v2 + 3]);
      if (p2)
        this._renderSegment(x, y, p2[0], p2[1], context);
    }
    return buffer && buffer.value();
  }
  renderBounds(context) {
    const buffer = context == null ? context = new Path() : void 0;
    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer && buffer.value();
  }
  renderCell(i3, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const points = this._clip(i3);
    if (points === null || !points.length)
      return;
    context.moveTo(points[0], points[1]);
    let n3 = points.length;
    while (points[0] === points[n3 - 2] && points[1] === points[n3 - 1] && n3 > 1)
      n3 -= 2;
    for (let i4 = 2; i4 < n3; i4 += 2) {
      if (points[i4] !== points[i4 - 2] || points[i4 + 1] !== points[i4 - 1])
        context.lineTo(points[i4], points[i4 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  *cellPolygons() {
    const { delaunay: { points } } = this;
    for (let i3 = 0, n3 = points.length / 2; i3 < n3; ++i3) {
      const cell = this.cellPolygon(i3);
      if (cell)
        cell.index = i3, yield cell;
    }
  }
  cellPolygon(i3) {
    const polygon = new Polygon();
    this.renderCell(i3, polygon);
    return polygon.value();
  }
  _renderSegment(x0, y0, x1, y1, context) {
    let S2;
    const c0 = this._regioncode(x0, y0);
    const c1 = this._regioncode(x1, y1);
    if (c0 === 0 && c1 === 0) {
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
    } else if (S2 = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
      context.moveTo(S2[0], S2[1]);
      context.lineTo(S2[2], S2[3]);
    }
  }
  contains(i3, x, y) {
    if ((x = +x, x !== x) || (y = +y, y !== y))
      return false;
    return this.delaunay._step(i3, x, y) === i3;
  }
  *neighbors(i3) {
    const ci = this._clip(i3);
    if (ci)
      for (const j2 of this.delaunay.neighbors(i3)) {
        const cj = this._clip(j2);
        if (cj)
          loop:
            for (let ai = 0, li = ci.length; ai < li; ai += 2) {
              for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
                if (ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]) {
                  yield j2;
                  break loop;
                }
              }
            }
      }
  }
  _cell(i3) {
    const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
    const e0 = inedges[i3];
    if (e0 === -1)
      return null;
    const points = [];
    let e3 = e0;
    do {
      const t3 = Math.floor(e3 / 3);
      points.push(circumcenters[t3 * 2], circumcenters[t3 * 2 + 1]);
      e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
      if (triangles[e3] !== i3)
        break;
      e3 = halfedges[e3];
    } while (e3 !== e0 && e3 !== -1);
    return points;
  }
  _clip(i3) {
    if (i3 === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    const points = this._cell(i3);
    if (points === null)
      return null;
    const { vectors: V } = this;
    const v2 = i3 * 4;
    return V[v2] || V[v2 + 1] ? this._clipInfinite(i3, points, V[v2], V[v2 + 1], V[v2 + 2], V[v2 + 3]) : this._clipFinite(i3, points);
  }
  _clipFinite(i3, points) {
    const n3 = points.length;
    let P2 = null;
    let x0, y0, x1 = points[n3 - 2], y1 = points[n3 - 1];
    let c0, c1 = this._regioncode(x1, y1);
    let e0, e1;
    for (let j2 = 0; j2 < n3; j2 += 2) {
      x0 = x1, y0 = y1, x1 = points[j2], y1 = points[j2 + 1];
      c0 = c1, c1 = this._regioncode(x1, y1);
      if (c0 === 0 && c1 === 0) {
        e0 = e1, e1 = 0;
        if (P2)
          P2.push(x1, y1);
        else
          P2 = [x1, y1];
      } else {
        let S2, sx0, sy0, sx1, sy1;
        if (c0 === 0) {
          if ((S2 = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null)
            continue;
          [sx0, sy0, sx1, sy1] = S2;
        } else {
          if ((S2 = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null)
            continue;
          [sx1, sy1, sx0, sy0] = S2;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1)
            this._edge(i3, e0, e1, P2, P2.length);
          if (P2)
            P2.push(sx0, sy0);
          else
            P2 = [sx0, sy0];
        }
        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1)
          this._edge(i3, e0, e1, P2, P2.length);
        if (P2)
          P2.push(sx1, sy1);
        else
          P2 = [sx1, sy1];
      }
    }
    if (P2) {
      e0 = e1, e1 = this._edgecode(P2[0], P2[1]);
      if (e0 && e1)
        this._edge(i3, e0, e1, P2, P2.length);
    } else if (this.contains(i3, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    return P2;
  }
  _clipSegment(x0, y0, x1, y1, c0, c1) {
    while (true) {
      if (c0 === 0 && c1 === 0)
        return [x0, y0, x1, y1];
      if (c0 & c1)
        return null;
      let x, y, c = c0 || c1;
      if (c & 8)
        x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
      else if (c & 4)
        x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
      else if (c & 2)
        y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
      else
        y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
      if (c0)
        x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
      else
        x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
    }
  }
  _clipInfinite(i3, points, vx0, vy0, vxn, vyn) {
    let P2 = Array.from(points), p2;
    if (p2 = this._project(P2[0], P2[1], vx0, vy0))
      P2.unshift(p2[0], p2[1]);
    if (p2 = this._project(P2[P2.length - 2], P2[P2.length - 1], vxn, vyn))
      P2.push(p2[0], p2[1]);
    if (P2 = this._clipFinite(i3, P2)) {
      for (let j2 = 0, n3 = P2.length, c0, c1 = this._edgecode(P2[n3 - 2], P2[n3 - 1]); j2 < n3; j2 += 2) {
        c0 = c1, c1 = this._edgecode(P2[j2], P2[j2 + 1]);
        if (c0 && c1)
          j2 = this._edge(i3, c0, c1, P2, j2), n3 = P2.length;
      }
    } else if (this.contains(i3, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P2 = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }
    return P2;
  }
  _edge(i3, e0, e1, P2, j2) {
    while (e0 !== e1) {
      let x, y;
      switch (e0) {
        case 5:
          e0 = 4;
          continue;
        case 4:
          e0 = 6, x = this.xmax, y = this.ymin;
          break;
        case 6:
          e0 = 2;
          continue;
        case 2:
          e0 = 10, x = this.xmax, y = this.ymax;
          break;
        case 10:
          e0 = 8;
          continue;
        case 8:
          e0 = 9, x = this.xmin, y = this.ymax;
          break;
        case 9:
          e0 = 1;
          continue;
        case 1:
          e0 = 5, x = this.xmin, y = this.ymin;
          break;
      }
      if ((P2[j2] !== x || P2[j2 + 1] !== y) && this.contains(i3, x, y)) {
        P2.splice(j2, 0, x, y), j2 += 2;
      }
    }
    if (P2.length > 4) {
      for (let i4 = 0; i4 < P2.length; i4 += 2) {
        const j3 = (i4 + 2) % P2.length, k3 = (i4 + 4) % P2.length;
        if (P2[i4] === P2[j3] && P2[j3] === P2[k3] || P2[i4 + 1] === P2[j3 + 1] && P2[j3 + 1] === P2[k3 + 1])
          P2.splice(j3, 2), i4 -= 2;
      }
    }
    return j2;
  }
  _project(x0, y0, vx, vy) {
    let t3 = Infinity, c, x, y;
    if (vy < 0) {
      if (y0 <= this.ymin)
        return null;
      if ((c = (this.ymin - y0) / vy) < t3)
        y = this.ymin, x = x0 + (t3 = c) * vx;
    } else if (vy > 0) {
      if (y0 >= this.ymax)
        return null;
      if ((c = (this.ymax - y0) / vy) < t3)
        y = this.ymax, x = x0 + (t3 = c) * vx;
    }
    if (vx > 0) {
      if (x0 >= this.xmax)
        return null;
      if ((c = (this.xmax - x0) / vx) < t3)
        x = this.xmax, y = y0 + (t3 = c) * vy;
    } else if (vx < 0) {
      if (x0 <= this.xmin)
        return null;
      if ((c = (this.xmin - x0) / vx) < t3)
        x = this.xmin, y = y0 + (t3 = c) * vy;
    }
    return [x, y];
  }
  _edgecode(x, y) {
    return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
  }
  _regioncode(x, y) {
    return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
  }
};

// node_modules/d3-delaunay/src/delaunay.js
var tau = 2 * Math.PI;
var pow = Math.pow;
function pointX(p2) {
  return p2[0];
}
function pointY(p2) {
  return p2[1];
}
function collinear(d) {
  const { triangles, coords } = d;
  for (let i3 = 0; i3 < triangles.length; i3 += 3) {
    const a2 = 2 * triangles[i3], b2 = 2 * triangles[i3 + 1], c = 2 * triangles[i3 + 2], cross = (coords[c] - coords[a2]) * (coords[b2 + 1] - coords[a2 + 1]) - (coords[b2] - coords[a2]) * (coords[c + 1] - coords[a2 + 1]);
    if (cross > 1e-10)
      return false;
  }
  return true;
}
function jitter(x, y, r3) {
  return [x + Math.sin(x + y) * r3, y + Math.cos(x - y) * r3];
}
var Delaunay = class _Delaunay {
  static from(points, fx = pointX, fy = pointY, that) {
    return new _Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
  }
  constructor(points) {
    this._delaunator = new Delaunator(points);
    this.inedges = new Int32Array(points.length / 2);
    this._hullIndex = new Int32Array(points.length / 2);
    this.points = this._delaunator.coords;
    this._init();
  }
  update() {
    this._delaunator.update();
    this._init();
    return this;
  }
  _init() {
    const d = this._delaunator, points = this.points;
    if (d.hull && d.hull.length > 2 && collinear(d)) {
      this.collinear = Int32Array.from({ length: points.length / 2 }, (_, i3) => i3).sort((i3, j2) => points[2 * i3] - points[2 * j2] || points[2 * i3 + 1] - points[2 * j2 + 1]);
      const e3 = this.collinear[0], f2 = this.collinear[this.collinear.length - 1], bounds = [points[2 * e3], points[2 * e3 + 1], points[2 * f2], points[2 * f2 + 1]], r3 = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
      for (let i3 = 0, n3 = points.length / 2; i3 < n3; ++i3) {
        const p2 = jitter(points[2 * i3], points[2 * i3 + 1], r3);
        points[2 * i3] = p2[0];
        points[2 * i3 + 1] = p2[1];
      }
      this._delaunator = new Delaunator(points);
    } else {
      delete this.collinear;
    }
    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);
    const hullIndex = this._hullIndex.fill(-1);
    for (let e3 = 0, n3 = halfedges.length; e3 < n3; ++e3) {
      const p2 = triangles[e3 % 3 === 2 ? e3 - 2 : e3 + 1];
      if (halfedges[e3] === -1 || inedges[p2] === -1)
        inedges[p2] = e3;
    }
    for (let i3 = 0, n3 = hull.length; i3 < n3; ++i3) {
      hullIndex[hull[i3]] = i3;
    }
    if (hull.length <= 2 && hull.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull[0];
      this.triangles[1] = hull[1];
      this.triangles[2] = hull[1];
      inedges[hull[0]] = 1;
      if (hull.length === 2)
        inedges[hull[1]] = 0;
    }
  }
  voronoi(bounds) {
    return new Voronoi(this, bounds);
  }
  *neighbors(i3) {
    const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
    if (collinear2) {
      const l2 = collinear2.indexOf(i3);
      if (l2 > 0)
        yield collinear2[l2 - 1];
      if (l2 < collinear2.length - 1)
        yield collinear2[l2 + 1];
      return;
    }
    const e0 = inedges[i3];
    if (e0 === -1)
      return;
    let e3 = e0, p0 = -1;
    do {
      yield p0 = triangles[e3];
      e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
      if (triangles[e3] !== i3)
        return;
      e3 = halfedges[e3];
      if (e3 === -1) {
        const p2 = hull[(_hullIndex[i3] + 1) % hull.length];
        if (p2 !== p0)
          yield p2;
        return;
      }
    } while (e3 !== e0);
  }
  find(x, y, i3 = 0) {
    if ((x = +x, x !== x) || (y = +y, y !== y))
      return -1;
    const i0 = i3;
    let c;
    while ((c = this._step(i3, x, y)) >= 0 && c !== i3 && c !== i0)
      i3 = c;
    return c;
  }
  _step(i3, x, y) {
    const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
    if (inedges[i3] === -1 || !points.length)
      return (i3 + 1) % (points.length >> 1);
    let c = i3;
    let dc = pow(x - points[i3 * 2], 2) + pow(y - points[i3 * 2 + 1], 2);
    const e0 = inedges[i3];
    let e3 = e0;
    do {
      let t3 = triangles[e3];
      const dt = pow(x - points[t3 * 2], 2) + pow(y - points[t3 * 2 + 1], 2);
      if (dt < dc)
        dc = dt, c = t3;
      e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
      if (triangles[e3] !== i3)
        break;
      e3 = halfedges[e3];
      if (e3 === -1) {
        e3 = hull[(_hullIndex[i3] + 1) % hull.length];
        if (e3 !== t3) {
          if (pow(x - points[e3 * 2], 2) + pow(y - points[e3 * 2 + 1], 2) < dc)
            return e3;
        }
        break;
      }
    } while (e3 !== e0);
    return c;
  }
  render(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, halfedges, triangles } = this;
    for (let i3 = 0, n3 = halfedges.length; i3 < n3; ++i3) {
      const j2 = halfedges[i3];
      if (j2 < i3)
        continue;
      const ti = triangles[i3] * 2;
      const tj = triangles[j2] * 2;
      context.moveTo(points[ti], points[ti + 1]);
      context.lineTo(points[tj], points[tj + 1]);
    }
    this.renderHull(context);
    return buffer && buffer.value();
  }
  renderPoints(context, r3 = 2) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points } = this;
    for (let i3 = 0, n3 = points.length; i3 < n3; i3 += 2) {
      const x = points[i3], y = points[i3 + 1];
      context.moveTo(x + r3, y);
      context.arc(x, y, r3, 0, tau);
    }
    return buffer && buffer.value();
  }
  renderHull(context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { hull, points } = this;
    const h = hull[0] * 2, n3 = hull.length;
    context.moveTo(points[h], points[h + 1]);
    for (let i3 = 1; i3 < n3; ++i3) {
      const h2 = 2 * hull[i3];
      context.lineTo(points[h2], points[h2 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  hullPolygon() {
    const polygon = new Polygon();
    this.renderHull(polygon);
    return polygon.value();
  }
  renderTriangle(i3, context) {
    const buffer = context == null ? context = new Path() : void 0;
    const { points, triangles } = this;
    const t0 = triangles[i3 *= 3] * 2;
    const t1 = triangles[i3 + 1] * 2;
    const t22 = triangles[i3 + 2] * 2;
    context.moveTo(points[t0], points[t0 + 1]);
    context.lineTo(points[t1], points[t1 + 1]);
    context.lineTo(points[t22], points[t22 + 1]);
    context.closePath();
    return buffer && buffer.value();
  }
  *trianglePolygons() {
    const { triangles } = this;
    for (let i3 = 0, n3 = triangles.length / 3; i3 < n3; ++i3) {
      yield this.trianglePolygon(i3);
    }
  }
  trianglePolygon(i3) {
    const polygon = new Polygon();
    this.renderTriangle(i3, polygon);
    return polygon.value();
  }
};
function flatArray(points, fx, fy, that) {
  const n3 = points.length;
  const array = new Float64Array(n3 * 2);
  for (let i3 = 0; i3 < n3; ++i3) {
    const p2 = points[i3];
    array[i3 * 2] = fx.call(that, p2, i3, points);
    array[i3 * 2 + 1] = fy.call(that, p2, i3, points);
  }
  return array;
}
function* flatIterable(points, fx, fy, that) {
  let i3 = 0;
  for (const p2 of points) {
    yield fx.call(that, p2, i3, points);
    yield fy.call(that, p2, i3, points);
    ++i3;
  }
}

// node_modules/@nivo/voronoi/dist/nivo-voronoi.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var b = function(n3) {
  return "function" == typeof n3 ? n3 : function(o3) {
    return o3[n3];
  };
};
var g2 = function(n3) {
  var o3 = n3.points, e3 = n3.x, i3 = void 0 === e3 ? "x" : e3, t3 = n3.y, r3 = void 0 === t3 ? "y" : t3, l2 = b(i3), u = b(r3);
  return o3.map(function(n4) {
    return [l2(n4), u(n4)];
  });
};
var k2 = function(n3) {
  var o3 = n3.points, e3 = n3.width, i3 = n3.height, t3 = n3.debug, r3 = Delaunay.from(o3), l2 = t3 ? r3.voronoi([0, 0, e3, i3]) : void 0;
  return { delaunay: r3, voronoi: l2 };
};
var C2 = function(o3) {
  var e3 = o3.points, i3 = o3.x, t3 = o3.y, r3 = o3.width, l2 = o3.height, u = o3.debug, a2 = (0, import_react.useMemo)(function() {
    return g2({ points: e3, x: i3, y: t3 });
  }, [e3, i3, t3]);
  return (0, import_react.useMemo)(function() {
    return k2({ points: a2, width: r3, height: l2, debug: u });
  }, [a2, r3, l2, u]);
};
var S = function(o3) {
  var e3 = o3.nodes, l2 = o3.width, u = o3.height, a2 = o3.x, d = o3.y, s2 = o3.onMouseEnter, h = o3.onMouseMove, m = o3.onMouseLeave, y = o3.onClick, b2 = o3.onTouchStart, g3 = o3.onTouchMove, k3 = o3.onTouchEnd, x = o3.enableTouchCrosshair, L = void 0 !== x && x, w3 = o3.debug, W = (0, import_react.useRef)(null), D2 = (0, import_react.useState)(null), M = D2[0], S2 = D2[1], T3 = C2({ points: e3, x: a2, y: d, width: l2, height: u, debug: w3 }), O2 = T3.delaunay, P2 = T3.voronoi, j2 = (0, import_react.useMemo)(function() {
    if (w3 && P2)
      return P2.render();
  }, [w3, P2]), E = (0, import_react.useCallback)(function(n3) {
    if (!W.current)
      return [null, null];
    var o4 = Xi(W.current, n3), i3 = o4[0], t3 = o4[1], r3 = O2.find(i3, t3);
    return [r3, void 0 !== r3 ? e3[r3] : null];
  }, [O2, e3]), z2 = (0, import_react.useCallback)(function(n3) {
    if (!W.current)
      return [null, null];
    var o4 = Xi(W.current, n3), i3 = o4[0], t3 = o4[1], r3 = O2.find(i3, t3);
    return [r3, void 0 !== r3 ? e3[r3] : null];
  }, [O2, e3]), A = (0, import_react.useCallback)(function(n3) {
    var o4 = E(n3), e4 = o4[0], i3 = o4[1];
    S2(e4), i3 && (null == s2 || s2(i3, n3));
  }, [E, S2, s2]), H2 = (0, import_react.useCallback)(function(n3) {
    var o4 = E(n3), e4 = o4[0], i3 = o4[1];
    S2(e4), i3 && (null == h || h(i3, n3));
  }, [E, S2, h]), B = (0, import_react.useCallback)(function(n3) {
    if (S2(null), m) {
      var o4 = void 0;
      null !== M && (o4 = e3[M]), o4 && m(o4, n3);
    }
  }, [S2, M, m, e3]), F = (0, import_react.useCallback)(function(n3) {
    var o4 = E(n3), e4 = o4[0], i3 = o4[1];
    S2(e4), i3 && (null == y || y(i3, n3));
  }, [E, S2, y]), I = (0, import_react.useCallback)(function(n3) {
    var o4 = z2(n3), e4 = o4[0], i3 = o4[1];
    L && S2(e4), i3 && (null == b2 || b2(i3, n3));
  }, [z2, L, b2]), q = (0, import_react.useCallback)(function(n3) {
    var o4 = z2(n3), e4 = o4[0], i3 = o4[1];
    L && S2(e4), i3 && (null == g3 || g3(i3, n3));
  }, [z2, L, g3]), G = (0, import_react.useCallback)(function(n3) {
    if (L && S2(null), k3) {
      var o4 = void 0;
      null !== M && (o4 = e3[M]), o4 && k3(o4, n3);
    }
  }, [L, k3, M, e3]);
  return (0, import_jsx_runtime.jsxs)("g", { ref: W, children: [w3 && P2 && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)("path", { d: j2, stroke: "red", strokeWidth: 1, opacity: 0.75 }), null !== M && (0, import_jsx_runtime.jsx)("path", { fill: "pink", opacity: 0.35, d: P2.renderCell(M) })] }), (0, import_jsx_runtime.jsx)("rect", { "data-ref": "mesh-interceptor", width: l2, height: u, fill: "red", opacity: 0, style: { cursor: "auto" }, onMouseEnter: A, onMouseMove: H2, onMouseLeave: B, onTouchStart: I, onTouchMove: q, onTouchEnd: G, onClick: F })] });
};
var T2 = function(n3, o3) {
  n3.save(), n3.globalAlpha = 0.75, n3.beginPath(), o3.render(n3), n3.strokeStyle = "red", n3.lineWidth = 1, n3.stroke(), n3.restore();
};
var O = function(n3, o3, e3) {
  n3.save(), n3.globalAlpha = 0.35, n3.beginPath(), o3.renderCell(e3, n3), n3.fillStyle = "red", n3.fill(), n3.restore();
};

// node_modules/@nivo/line/dist/nivo-line.es.js
function re() {
  return re = Object.assign ? Object.assign.bind() : function(e3) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var o3 = arguments[i3];
      for (var r3 in o3)
        Object.prototype.hasOwnProperty.call(o3, r3) && (e3[r3] = o3[r3]);
    }
    return e3;
  }, re.apply(this, arguments);
}
var ne = function(e3) {
  var i3 = e3.point;
  return (0, import_jsx_runtime2.jsx)(w, { id: (0, import_jsx_runtime2.jsxs)("span", { children: ["x: ", (0, import_jsx_runtime2.jsx)("strong", { children: i3.data.xFormatted }), ", y:", " ", (0, import_jsx_runtime2.jsx)("strong", { children: i3.data.yFormatted })] }), enableChip: true, color: i3.serieColor });
};
ne.propTypes = { point: import_prop_types.default.object.isRequired };
var te = (0, import_react2.memo)(ne);
var ae = function(e3) {
  var i3 = e3.slice, o3 = e3.axis, r3 = Et(), n3 = "x" === o3 ? "y" : "x";
  return (0, import_jsx_runtime2.jsx)(C, { rows: i3.points.map(function(e4) {
    return [(0, import_jsx_runtime2.jsx)(g, { color: e4.serieColor, style: r3.tooltip.chip }, "chip"), e4.serieId, (0, import_jsx_runtime2.jsx)("span", { style: r3.tooltip.tableCellValue, children: e4.data[n3 + "Formatted"] }, "value")];
  }) });
};
ae.propTypes = { slice: import_prop_types.default.object.isRequired, axis: import_prop_types.default.oneOf(["x", "y"]).isRequired };
var se = (0, import_react2.memo)(ae);
var le = { data: import_prop_types.default.arrayOf(import_prop_types.default.shape({ id: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]).isRequired, data: import_prop_types.default.arrayOf(import_prop_types.default.shape({ x: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]), y: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]) })).isRequired })).isRequired, xScale: import_prop_types.default.object.isRequired, xFormat: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.string]), yScale: import_prop_types.default.object.isRequired, yFormat: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.string]), layers: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["grid", "markers", "axes", "areas", "crosshair", "lines", "slices", "points", "mesh", "legends"]), import_prop_types.default.func])).isRequired, curve: bt.isRequired, axisTop: w2, axisRight: w2, axisBottom: w2, axisLeft: w2, enableGridX: import_prop_types.default.bool.isRequired, enableGridY: import_prop_types.default.bool.isRequired, gridXValues: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]))]), gridYValues: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]))]), enablePoints: import_prop_types.default.bool.isRequired, pointSymbol: import_prop_types.default.func, pointSize: import_prop_types.default.number.isRequired, pointColor: import_prop_types.default.any.isRequired, pointBorderWidth: import_prop_types.default.number.isRequired, pointBorderColor: import_prop_types.default.any.isRequired, enablePointLabel: import_prop_types.default.bool.isRequired, pointLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]).isRequired, markers: import_prop_types.default.arrayOf(import_prop_types.default.shape({ axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, style: import_prop_types.default.object })), colors: Xe.isRequired, enableArea: import_prop_types.default.bool.isRequired, areaOpacity: import_prop_types.default.number.isRequired, areaBlendMode: zt.isRequired, areaBaselineValue: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, lineWidth: import_prop_types.default.number.isRequired, legends: import_prop_types.default.arrayOf(import_prop_types.default.shape(T)).isRequired, isInteractive: import_prop_types.default.bool.isRequired, debugMesh: import_prop_types.default.bool.isRequired, tooltip: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]).isRequired, enableSlices: import_prop_types.default.oneOf(["x", "y", false]).isRequired, debugSlices: import_prop_types.default.bool.isRequired, sliceTooltip: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]).isRequired, enableCrosshair: import_prop_types.default.bool.isRequired, crosshairType: import_prop_types.default.string.isRequired };
var ue = re({}, le, { enablePointLabel: import_prop_types.default.bool.isRequired, role: import_prop_types.default.string.isRequired, useMesh: import_prop_types.default.bool.isRequired, enableTouchCrosshair: import_prop_types.default.bool }, Qr, yt);
var de = re({ pixelRatio: import_prop_types.default.number.isRequired }, le);
var ce = { curve: "linear", xScale: { type: "point" }, yScale: { type: "linear", min: 0, max: "auto" }, layers: ["grid", "markers", "axes", "areas", "crosshair", "lines", "points", "slices", "mesh", "legends"], axisBottom: {}, axisLeft: {}, enableGridX: true, enableGridY: true, enablePoints: true, pointSize: 6, pointColor: { from: "color" }, pointBorderWidth: 0, pointBorderColor: { theme: "background" }, enablePointLabel: false, pointLabel: "yFormatted", colors: { scheme: "nivo" }, enableArea: false, areaBaselineValue: 0, areaOpacity: 0.2, areaBlendMode: "normal", lineWidth: 2, legends: [], isInteractive: true, tooltip: te, enableSlices: false, debugSlices: false, sliceTooltip: se, debugMesh: false, enableCrosshair: true, crosshairType: "bottom-left" };
var he = re({}, ce, { enablePointLabel: false, useMesh: false, enableTouchCrosshair: false, animate: true, motionConfig: "gentle", defs: [], fill: [], role: "img" });
var fe = re({}, ce, { pixelRatio: "undefined" != typeof window && window.devicePixelRatio || 1 });
var pe = function(e3) {
  var o3 = e3.curve;
  return (0, import_react2.useMemo)(function() {
    return line_default().defined(function(e4) {
      return null !== e4.x && null !== e4.y;
    }).x(function(e4) {
      return e4.x;
    }).y(function(e4) {
      return e4.y;
    }).curve(mt(o3));
  }, [o3]);
};
var ve = function(e3) {
  var o3 = e3.curve, r3 = e3.yScale, n3 = e3.areaBaselineValue;
  return (0, import_react2.useMemo)(function() {
    return area_default().defined(function(e4) {
      return null !== e4.x && null !== e4.y;
    }).x(function(e4) {
      return e4.x;
    }).y1(function(e4) {
      return e4.y;
    }).curve(mt(o3)).y0(r3(n3));
  }, [o3, r3, n3]);
};
var ye = function(e3) {
  var o3 = e3.componentId, r3 = e3.enableSlices, n3 = e3.points, t3 = e3.width, a2 = e3.height;
  return (0, import_react2.useMemo)(function() {
    if (false === r3)
      return [];
    if ("x" === r3) {
      var e4 = /* @__PURE__ */ new Map();
      return n3.forEach(function(i4) {
        null !== i4.data.x && null !== i4.data.y && (e4.has(i4.x) ? e4.get(i4.x).push(i4) : e4.set(i4.x, [i4]));
      }), Array.from(e4.entries()).sort(function(e5, i4) {
        return e5[0] - i4[0];
      }).map(function(e5, i4, r4) {
        var n4, s2, l2 = e5[0], u = e5[1], d = r4[i4 - 1], c = r4[i4 + 1];
        return n4 = d ? l2 - (l2 - d[0]) / 2 : l2, s2 = c ? l2 - n4 + (c[0] - l2) / 2 : t3 - n4, { id: "slice:" + o3 + ":" + l2, x0: n4, x: l2, y0: 0, y: 0, width: s2, height: a2, points: u.reverse() };
      });
    }
    if ("y" === r3) {
      var i3 = /* @__PURE__ */ new Map();
      return n3.forEach(function(e5) {
        null !== e5.data.x && null !== e5.data.y && (i3.has(e5.y) ? i3.get(e5.y).push(e5) : i3.set(e5.y, [e5]));
      }), Array.from(i3.entries()).sort(function(e5, i4) {
        return e5[0] - i4[0];
      }).map(function(e5, i4, o4) {
        var r4, n4, s2 = e5[0], l2 = e5[1], u = o4[i4 - 1], d = o4[i4 + 1];
        return r4 = u ? s2 - (s2 - u[0]) / 2 : s2, n4 = d ? s2 - r4 + (d[0] - s2) / 2 : a2 - r4, { id: s2, x0: 0, x: 0, y0: r4, y: s2, width: t3, height: n4, points: l2.reverse() };
      });
    }
  }, [o3, r3, a2, n3, t3]);
};
var be = "line";
var me = function(e3) {
  var n3 = e3.data, t3 = e3.xScale, a2 = void 0 === t3 ? he.xScale : t3, s2 = e3.xFormat, l2 = e3.yScale, d = void 0 === l2 ? he.yScale : l2, c = e3.yFormat, h = e3.width, f2 = e3.height, p2 = e3.colors, y = void 0 === p2 ? he.colors : p2, b2 = e3.curve, m = void 0 === b2 ? he.curve : b2, g3 = e3.areaBaselineValue, x = void 0 === g3 ? he.areaBaselineValue : g3, R = e3.pointColor, T3 = void 0 === R ? he.pointColor : R, q = e3.pointBorderColor, M = void 0 === q ? he.pointBorderColor : q, O2 = e3.enableSlices, S2 = void 0 === O2 ? he.enableSlicesTooltip : O2, C3 = (0, import_react2.useState)((0, import_uniqueId.default)(be))[0], w3 = Dt(s2), E = Dt(c), L = pr(y, "id"), W = Et(), G = We(T3, W), P2 = We(M, W), j2 = (0, import_react2.useState)([]), F = j2[0], V = j2[1], Y = (0, import_react2.useMemo)(function() {
    return dn(n3.filter(function(e4) {
      return -1 === F.indexOf(e4.id);
    }), a2, d, h, f2);
  }, [n3, F, a2, d, h, f2]), D2 = Y.xScale, I = Y.yScale, X3 = Y.series, A = (0, import_react2.useMemo)(function() {
    var e4 = n3.map(function(e5) {
      return { id: e5.id, label: e5.id, color: L(e5) };
    }), i3 = e4.map(function(e5) {
      return re({}, X3.find(function(i4) {
        return i4.id === e5.id;
      }), { color: e5.color });
    }).filter(function(e5) {
      return Boolean(e5.id);
    });
    return { legendData: e4.map(function(e5) {
      return re({}, e5, { hidden: !i3.find(function(i4) {
        return i4.id === e5.id;
      }) });
    }).reverse(), series: i3 };
  }, [n3, X3, L]), z2 = A.legendData, H2 = A.series, N2 = (0, import_react2.useCallback)(function(e4) {
    V(function(i3) {
      return i3.indexOf(e4) > -1 ? i3.filter(function(i4) {
        return i4 !== e4;
      }) : [].concat(i3, [e4]);
    });
  }, []), Q2 = function(e4) {
    var o3 = e4.series, r3 = e4.getPointColor, n4 = e4.getPointBorderColor, t4 = e4.formatX, a3 = e4.formatY;
    return (0, import_react2.useMemo)(function() {
      return o3.reduce(function(e5, i3) {
        return [].concat(e5, i3.data.filter(function(e6) {
          return null !== e6.position.x && null !== e6.position.y;
        }).map(function(o4, s3) {
          var l3 = { id: i3.id + "." + s3, index: e5.length + s3, serieId: i3.id, serieColor: i3.color, x: o4.position.x, y: o4.position.y };
          return l3.color = r3(i3), l3.borderColor = n4(l3), l3.data = re({}, o4.data, { xFormatted: t4(o4.data.x), yFormatted: a3(o4.data.y) }), l3;
        }));
      }, []);
    }, [o3, r3, n4, t4, a3]);
  }({ series: H2, getPointColor: G, getPointBorderColor: P2, formatX: w3, formatY: E }), U2 = ye({ componentId: C3, enableSlices: S2, points: Q2, width: h, height: f2 });
  return { legendData: z2, toggleSerie: N2, lineGenerator: pe({ curve: m }), areaGenerator: ve({ curve: m, yScale: I, areaBaselineValue: x }), getColor: L, series: H2, xScale: D2, yScale: I, slices: U2, points: Q2 };
};
var ge = function(e3) {
  var i3 = e3.areaBlendMode, o3 = e3.areaOpacity, r3 = e3.color, n3 = e3.fill, t3 = e3.path, a2 = Zr(), s2 = a2.animate, l2 = a2.config, u = $r(t3), d = useSpring({ color: r3, config: l2, immediate: !s2 });
  return (0, import_jsx_runtime2.jsx)(animated.path, { d: u, fill: n3 || d.color, fillOpacity: o3, strokeWidth: 0, style: { mixBlendMode: i3 } });
};
ge.propTypes = { areaBlendMode: zt.isRequired, areaOpacity: import_prop_types.default.number.isRequired, color: import_prop_types.default.string, fill: import_prop_types.default.string, path: import_prop_types.default.string.isRequired };
var xe = function(e3) {
  var i3 = e3.areaGenerator, o3 = e3.areaOpacity, r3 = e3.areaBlendMode, n3 = e3.lines.slice(0).reverse();
  return (0, import_jsx_runtime2.jsx)("g", { children: n3.map(function(e4) {
    return (0, import_jsx_runtime2.jsx)(ge, re({ path: i3(e4.data.map(function(e5) {
      return e5.position;
    })) }, re({ areaOpacity: o3, areaBlendMode: r3 }, e4)), e4.id);
  }) });
};
xe.propTypes = { areaGenerator: import_prop_types.default.func.isRequired, areaOpacity: import_prop_types.default.number.isRequired, areaBlendMode: zt.isRequired, lines: import_prop_types.default.arrayOf(import_prop_types.default.object).isRequired };
var Re = (0, import_react2.memo)(xe);
var Te = function(e3) {
  var o3 = e3.lineGenerator, r3 = e3.points, n3 = e3.color, t3 = e3.thickness, a2 = (0, import_react2.useMemo)(function() {
    return o3(r3);
  }, [o3, r3]), s2 = $r(a2);
  return (0, import_jsx_runtime2.jsx)(animated.path, { d: s2, fill: "none", strokeWidth: t3, stroke: n3 });
};
Te.propTypes = { points: import_prop_types.default.arrayOf(import_prop_types.default.shape({ x: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]), y: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]) })), lineGenerator: import_prop_types.default.func.isRequired, color: import_prop_types.default.string.isRequired, thickness: import_prop_types.default.number.isRequired };
var qe = (0, import_react2.memo)(Te);
var Me = function(e3) {
  var i3 = e3.lines, o3 = e3.lineGenerator, r3 = e3.lineWidth;
  return i3.slice(0).reverse().map(function(e4) {
    var i4 = e4.id, n3 = e4.data, t3 = e4.color;
    return (0, import_jsx_runtime2.jsx)(qe, { id: i4, points: n3.map(function(e5) {
      return e5.position;
    }), lineGenerator: o3, color: t3, thickness: r3 }, i4);
  });
};
Me.propTypes = { lines: import_prop_types.default.arrayOf(import_prop_types.default.shape({ id: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]).isRequired, color: import_prop_types.default.string.isRequired, data: import_prop_types.default.arrayOf(import_prop_types.default.shape({ data: import_prop_types.default.shape({ x: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number, import_prop_types.default.instanceOf(Date)]), y: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number, import_prop_types.default.instanceOf(Date)]) }).isRequired, position: import_prop_types.default.shape({ x: import_prop_types.default.number, y: import_prop_types.default.number }).isRequired })).isRequired })).isRequired, lineWidth: import_prop_types.default.number.isRequired, lineGenerator: import_prop_types.default.func.isRequired };
var Oe = (0, import_react2.memo)(Me);
var Se = function(e3) {
  var i3 = e3.slice, o3 = e3.slices, t3 = e3.axis, a2 = e3.debug, s2 = e3.tooltip, l2 = e3.isCurrent, u = e3.setCurrent, d = e3.onMouseEnter, c = e3.onMouseMove, h = e3.onMouseLeave, f2 = e3.onClick, p2 = e3.onTouchStart, v2 = e3.onTouchMove, y = e3.onTouchEnd, b2 = k(), m = b2.showTooltipFromEvent, g3 = b2.hideTooltip, x = (0, import_react2.useCallback)(function(e4) {
    m((0, import_react2.createElement)(s2, { slice: i3, axis: t3 }), e4, "right"), u(i3), d && d(i3, e4);
  }, [m, s2, i3, t3, u, d]), R = (0, import_react2.useCallback)(function(e4) {
    m((0, import_react2.createElement)(s2, { slice: i3, axis: t3 }), e4, "right"), c && c(i3, e4);
  }, [m, s2, i3, t3, c]), T3 = (0, import_react2.useCallback)(function(e4) {
    g3(), u(null), h && h(i3, e4);
  }, [g3, u, h, i3]), q = (0, import_react2.useCallback)(function(e4) {
    f2 && f2(i3, e4);
  }, [i3, f2]), M = (0, import_react2.useCallback)(function(e4) {
    m((0, import_react2.createElement)(s2, { slice: i3, axis: t3 }), e4, "right"), u(i3), p2 && p2(i3, e4);
  }, [t3, p2, u, m, i3, s2]), O2 = (0, import_react2.useCallback)(function(e4) {
    var r3 = e4.touches[0], a3 = document.elementFromPoint(r3.clientX, r3.clientY), l3 = null == a3 ? void 0 : a3.getAttribute("data-ref");
    if (l3) {
      var d2 = o3.find(function(e5) {
        return e5.id === l3;
      });
      d2 && (m((0, import_react2.createElement)(s2, { slice: d2, axis: t3 }), e4, "right"), u(d2));
    }
    v2 && v2(i3, e4);
  }, [t3, v2, u, m, i3, o3, s2]), S2 = (0, import_react2.useCallback)(function(e4) {
    g3(), u(null), y && y(i3, e4);
  }, [g3, u, y, i3]);
  return (0, import_jsx_runtime2.jsx)("rect", { x: i3.x0, y: i3.y0, width: i3.width, height: i3.height, stroke: "red", strokeWidth: a2 ? 1 : 0, strokeOpacity: 0.75, fill: "red", fillOpacity: l2 && a2 ? 0.35 : 0, onMouseEnter: x, onMouseMove: R, onMouseLeave: T3, onClick: q, onTouchStart: M, onTouchMove: O2, onTouchEnd: S2, "data-ref": i3.id });
};
Se.propTypes = { slice: import_prop_types.default.object.isRequired, slices: import_prop_types.default.arrayOf(import_prop_types.default.object).isRequired, axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, debug: import_prop_types.default.bool.isRequired, height: import_prop_types.default.number.isRequired, tooltip: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]), isCurrent: import_prop_types.default.bool.isRequired, setCurrent: import_prop_types.default.func.isRequired, onMouseEnter: import_prop_types.default.func, onMouseMove: import_prop_types.default.func, onMouseLeave: import_prop_types.default.func, onClick: import_prop_types.default.func };
var Ce = (0, import_react2.memo)(Se);
var we = function(e3) {
  var i3 = e3.slices, o3 = e3.axis, r3 = e3.debug, n3 = e3.height, t3 = e3.tooltip, a2 = e3.current, s2 = e3.setCurrent, l2 = e3.onMouseEnter, u = e3.onMouseMove, d = e3.onMouseLeave, c = e3.onClick, h = e3.onTouchStart, f2 = e3.onTouchMove, p2 = e3.onTouchEnd;
  return i3.map(function(e4) {
    return (0, import_jsx_runtime2.jsx)(Ce, { slice: e4, slices: i3, axis: o3, debug: r3, height: n3, tooltip: t3, setCurrent: s2, isCurrent: null !== a2 && a2.id === e4.id, onMouseEnter: l2, onMouseMove: u, onMouseLeave: d, onClick: c, onTouchStart: h, onTouchMove: f2, onTouchEnd: p2 }, e4.id);
  });
};
we.propTypes = { slices: import_prop_types.default.arrayOf(import_prop_types.default.shape({ id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, x: import_prop_types.default.number.isRequired, y: import_prop_types.default.number.isRequired, points: import_prop_types.default.arrayOf(import_prop_types.default.object).isRequired })).isRequired, axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, debug: import_prop_types.default.bool.isRequired, height: import_prop_types.default.number.isRequired, tooltip: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]).isRequired, current: import_prop_types.default.object, setCurrent: import_prop_types.default.func.isRequired, onMouseEnter: import_prop_types.default.func, onMouseMove: import_prop_types.default.func, onMouseLeave: import_prop_types.default.func, onClick: import_prop_types.default.func, onTouchStart: import_prop_types.default.func, onTouchMove: import_prop_types.default.func, onTouchEnd: import_prop_types.default.func };
var ke = (0, import_react2.memo)(we);
var Be = function(e3) {
  var i3 = e3.points, o3 = e3.symbol, r3 = e3.size, n3 = e3.borderWidth, t3 = e3.enableLabel, a2 = e3.label, s2 = e3.labelYOffset, l2 = Et(), d = Li(a2), c = i3.slice(0).reverse().map(function(e4) {
    return { id: e4.id, x: e4.x, y: e4.y, datum: e4.data, fill: e4.color, stroke: e4.borderColor, label: t3 ? d(e4.data) : null };
  });
  return (0, import_jsx_runtime2.jsx)("g", { children: c.map(function(e4) {
    return (0, import_jsx_runtime2.jsx)(Ti, { x: e4.x, y: e4.y, datum: e4.datum, symbol: o3, size: r3, color: e4.fill, borderWidth: n3, borderColor: e4.stroke, label: e4.label, labelYOffset: s2, theme: l2 }, e4.id);
  }) });
};
Be.propTypes = { points: import_prop_types.default.arrayOf(import_prop_types.default.object), symbol: import_prop_types.default.func, size: import_prop_types.default.number.isRequired, color: import_prop_types.default.func.isRequired, borderWidth: import_prop_types.default.number.isRequired, borderColor: import_prop_types.default.func.isRequired, enableLabel: import_prop_types.default.bool.isRequired, label: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]).isRequired, labelYOffset: import_prop_types.default.number };
var Ee = (0, import_react2.memo)(Be);
var Le = function(e3) {
  var i3 = e3.points, o3 = e3.width, t3 = e3.height, a2 = e3.margin, s2 = e3.setCurrent, l2 = e3.onMouseEnter, u = e3.onMouseMove, d = e3.onMouseLeave, c = e3.onClick, h = e3.onTouchStart, f2 = e3.onTouchMove, p2 = e3.onTouchEnd, v2 = e3.tooltip, y = e3.debug, b2 = e3.enableTouchCrosshair, m = k(), g3 = m.showTooltipAt, x = m.hideTooltip, R = (0, import_react2.useCallback)(function(e4, i4) {
    g3((0, import_react2.createElement)(v2, { point: e4 }), [e4.x + a2.left, e4.y + a2.top], "top"), s2(e4), l2 && l2(e4, i4);
  }, [s2, g3, v2, l2, a2]), T3 = (0, import_react2.useCallback)(function(e4, i4) {
    g3((0, import_react2.createElement)(v2, { point: e4 }), [e4.x + a2.left, e4.y + a2.top], "top"), s2(e4), u && u(e4, i4);
  }, [g3, v2, a2.left, a2.top, s2, u]), q = (0, import_react2.useCallback)(function(e4, i4) {
    x(), s2(null), d && d(e4, i4);
  }, [x, s2, d]), M = (0, import_react2.useCallback)(function(e4, i4) {
    c && c(e4, i4);
  }, [c]), O2 = (0, import_react2.useCallback)(function(e4, i4) {
    g3((0, import_react2.createElement)(v2, { point: e4 }), [e4.x + a2.left, e4.y + a2.top], "top"), s2(e4), h && h(e4, i4);
  }, [a2.left, a2.top, h, s2, g3, v2]), S2 = (0, import_react2.useCallback)(function(e4, i4) {
    g3((0, import_react2.createElement)(v2, { point: e4 }), [e4.x + a2.left, e4.y + a2.top], "top"), s2(e4), f2 && f2(e4, i4);
  }, [a2.left, a2.top, f2, s2, g3, v2]), C3 = (0, import_react2.useCallback)(function(e4, i4) {
    x(), s2(null), p2 && p2(e4, i4);
  }, [p2, x, s2]);
  return (0, import_jsx_runtime2.jsx)(S, { nodes: i3, width: o3, height: t3, onMouseEnter: R, onMouseMove: T3, onMouseLeave: q, onClick: M, onTouchStart: O2, onTouchMove: S2, onTouchEnd: C3, enableTouchCrosshair: b2, debug: y });
};
Le.propTypes = { points: import_prop_types.default.arrayOf(import_prop_types.default.object).isRequired, width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, margin: import_prop_types.default.object.isRequired, setCurrent: import_prop_types.default.func.isRequired, onMouseEnter: import_prop_types.default.func, onMouseMove: import_prop_types.default.func, onMouseLeave: import_prop_types.default.func, onClick: import_prop_types.default.func, onTouchStart: import_prop_types.default.func, onTouchMove: import_prop_types.default.func, onTouchEnd: import_prop_types.default.func, tooltip: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]).isRequired, debug: import_prop_types.default.bool.isRequired };
var We2 = (0, import_react2.memo)(Le);
var Ge = function(e3) {
  var i3 = e3.data, r3 = e3.xScale, n3 = void 0 === r3 ? { type: "point" } : r3, a2 = e3.xFormat, s2 = e3.yScale, l2 = void 0 === s2 ? { type: "linear", min: 0, max: "auto" } : s2, d = e3.yFormat, c = e3.layers, h = void 0 === c ? ["grid", "markers", "axes", "areas", "crosshair", "lines", "points", "slices", "mesh", "legends"] : c, f2 = e3.curve, p2 = void 0 === f2 ? "linear" : f2, v2 = e3.areaBaselineValue, y = void 0 === v2 ? 0 : v2, b2 = e3.colors, m = void 0 === b2 ? { scheme: "nivo" } : b2, g3 = e3.margin, x = e3.width, O2 = e3.height, S2 = e3.axisTop, C3 = e3.axisRight, w3 = e3.axisBottom, k3 = void 0 === w3 ? {} : w3, E = e3.axisLeft, G = void 0 === E ? {} : E, P2 = e3.enableGridX, j2 = void 0 === P2 || P2, V = e3.enableGridY, Y = void 0 === V || V, D2 = e3.gridXValues, I = e3.gridYValues, X3 = e3.lineWidth, z2 = void 0 === X3 ? 2 : X3, H2 = e3.enableArea, J = void 0 !== H2 && H2, K2 = e3.areaOpacity, N2 = void 0 === K2 ? 0.2 : K2, U2 = e3.areaBlendMode, Z = void 0 === U2 ? "normal" : U2, $ = e3.enablePoints, _ = void 0 === $ || $, ee = e3.pointSymbol, ie = e3.pointSize, oe = void 0 === ie ? 6 : ie, ne2 = e3.pointColor, ae2 = void 0 === ne2 ? { from: "color" } : ne2, le2 = e3.pointBorderWidth, ue2 = void 0 === le2 ? 0 : le2, de2 = e3.pointBorderColor, ce2 = void 0 === de2 ? { theme: "background" } : de2, he2 = e3.enablePointLabel, fe2 = void 0 !== he2 && he2, pe2 = e3.pointLabel, ve2 = void 0 === pe2 ? "yFormatted" : pe2, ye2 = e3.pointLabelYOffset, be2 = e3.defs, ge2 = void 0 === be2 ? [] : be2, xe2 = e3.fill, Te2 = void 0 === xe2 ? [] : xe2, qe2 = e3.markers, Me2 = e3.legends, Se2 = void 0 === Me2 ? [] : Me2, Ce2 = e3.isInteractive, we2 = void 0 === Ce2 || Ce2, Be2 = e3.useMesh, Le2 = void 0 !== Be2 && Be2, Ge2 = e3.debugMesh, Pe2 = void 0 !== Ge2 && Ge2, je2 = e3.onMouseEnter, Fe2 = e3.onMouseMove, Ve2 = e3.onMouseLeave, Ye2 = e3.onClick, De2 = e3.onTouchStart, Ie = e3.onTouchMove, Xe2 = e3.onTouchEnd, Ae = e3.tooltip, ze = void 0 === Ae ? te : Ae, He = e3.enableSlices, Je = void 0 !== He && He, Ke = e3.debugSlices, Ne = void 0 !== Ke && Ke, Qe = e3.sliceTooltip, Ue = void 0 === Qe ? se : Qe, Ze = e3.enableCrosshair, $e = void 0 === Ze || Ze, _e = e3.crosshairType, ei = void 0 === _e ? "bottom-left" : _e, ii = e3.enableTouchCrosshair, oi = void 0 !== ii && ii, ri = e3.role, ni = void 0 === ri ? "img" : ri, ti = Bt(x, O2, g3), ai = ti.margin, si = ti.innerWidth, li = ti.innerHeight, ui = ti.outerWidth, di = ti.outerHeight, ci = me({ data: i3, xScale: n3, xFormat: a2, yScale: l2, yFormat: d, width: si, height: li, colors: m, curve: p2, areaBaselineValue: y, pointColor: ae2, pointBorderColor: ce2, enableSlices: Je }), hi = ci.legendData, fi = ci.toggleSerie, pi = ci.lineGenerator, vi = ci.areaGenerator, yi = ci.series, bi = ci.xScale, mi = ci.yScale, gi = ci.slices, xi = ci.points, Ri = Et(), Ti2 = We(ae2, Ri), qi = We(ce2, Ri), Mi = (0, import_react2.useState)(null), Oi2 = Mi[0], Si = Mi[1], Ci = (0, import_react2.useState)(null), wi = Ci[0], ki = Ci[1], Bi = { grid: (0, import_jsx_runtime2.jsx)(z, { theme: Ri, width: si, height: li, xScale: j2 ? bi : null, yScale: Y ? mi : null, xValues: D2, yValues: I }, "grid"), markers: (0, import_jsx_runtime2.jsx)(Pi, { markers: qe2, width: si, height: li, xScale: bi, yScale: mi, theme: Ri }, "markers"), axes: (0, import_jsx_runtime2.jsx)(X, { xScale: bi, yScale: mi, width: si, height: li, theme: Ri, top: S2, right: C3, bottom: k3, left: G }, "axes"), areas: null, lines: (0, import_jsx_runtime2.jsx)(Oe, { lines: yi, lineGenerator: pi, lineWidth: z2 }, "lines"), slices: null, points: null, crosshair: null, mesh: null, legends: Se2.map(function(e4, i4) {
    return (0, import_jsx_runtime2.jsx)(X2, re({}, e4, { containerWidth: si, containerHeight: li, data: e4.data || hi, theme: Ri, toggleSerie: e4.toggleSerie ? fi : void 0 }), "legend." + i4);
  }) }, Ei = Vi(ge2, yi, Te2);
  return J && (Bi.areas = (0, import_jsx_runtime2.jsx)(Re, { areaGenerator: vi, areaOpacity: N2, areaBlendMode: Z, lines: yi }, "areas")), we2 && false !== Je && (Bi.slices = (0, import_jsx_runtime2.jsx)(ke, { slices: gi, axis: Je, debug: Ne, height: li, tooltip: Ue, current: wi, setCurrent: ki, onMouseEnter: je2, onMouseMove: Fe2, onMouseLeave: Ve2, onClick: Ye2, onTouchStart: De2, onTouchMove: Ie, onTouchEnd: Xe2 }, "slices")), _ && (Bi.points = (0, import_jsx_runtime2.jsx)(Ee, { points: xi, symbol: ee, size: oe, color: Ti2, borderWidth: ue2, borderColor: qi, enableLabel: fe2, label: ve2, labelYOffset: ye2 }, "points")), we2 && $e && (null !== Oi2 && (Bi.crosshair = (0, import_jsx_runtime2.jsx)(P, { width: si, height: li, x: Oi2.x, y: Oi2.y, type: ei }, "crosshair")), null !== wi && (Bi.crosshair = (0, import_jsx_runtime2.jsx)(P, { width: si, height: li, x: wi.x, y: wi.y, type: Je }, "crosshair"))), we2 && Le2 && false === Je && (Bi.mesh = (0, import_jsx_runtime2.jsx)(We2, { points: xi, width: si, height: li, margin: ai, current: Oi2, setCurrent: Si, onMouseEnter: je2, onMouseMove: Fe2, onMouseLeave: Ve2, onClick: Ye2, onTouchStart: De2, onTouchMove: Ie, onTouchEnd: Xe2, tooltip: ze, enableTouchCrosshair: oi, debug: Pe2 }, "mesh")), (0, import_jsx_runtime2.jsx)(Oi, { defs: Ei, width: ui, height: di, margin: ai, role: ni, children: h.map(function(i4, o3) {
    return "function" == typeof i4 ? (0, import_jsx_runtime2.jsx)(import_react2.Fragment, { children: i4(re({}, e3, { innerWidth: si, innerHeight: li, series: yi, slices: gi, points: xi, xScale: bi, yScale: mi, lineGenerator: pi, areaGenerator: vi, currentPoint: Oi2, setCurrentPoint: Si, currentSlice: wi, setCurrentSlice: ki })) }, o3) : Bi[i4];
  }) });
};
Ge.propTypes = ue;
var Pe = Gi(Ge);
var je = function(e3) {
  return (0, import_jsx_runtime2.jsx)(Jt, { children: function(i3) {
    var o3 = i3.width, r3 = i3.height;
    return (0, import_jsx_runtime2.jsx)(Pe, re({ width: o3, height: r3 }, e3));
  } });
};
var Fe = function(e3) {
  var i3 = (0, import_react2.useRef)(null), t3 = e3.width, a2 = e3.height, d = e3.margin, c = e3.pixelRatio, h = void 0 === c ? "undefined" != typeof window && window.devicePixelRatio || 1 : c, f2 = e3.data, p2 = e3.xScale, v2 = void 0 === p2 ? { type: "point" } : p2, y = e3.xFormat, b2 = e3.yScale, m = void 0 === b2 ? { type: "linear", min: 0, max: "auto" } : b2, g3 = e3.yFormat, x = e3.curve, T3 = void 0 === x ? "linear" : x, q = e3.layers, M = void 0 === q ? ["grid", "markers", "axes", "areas", "crosshair", "lines", "points", "slices", "mesh", "legends"] : q, O2 = e3.colors, w3 = void 0 === O2 ? { scheme: "nivo" } : O2, k3 = e3.lineWidth, B = void 0 === k3 ? 2 : k3, E = e3.enableArea, L = void 0 !== E && E, W = e3.areaBaselineValue, j2 = void 0 === W ? 0 : W, F = e3.areaOpacity, Y = void 0 === F ? 0.2 : F, D2 = e3.enablePoints, I = void 0 === D2 || D2, A = e3.pointSize, z2 = void 0 === A ? 6 : A, H2 = e3.pointColor, J = void 0 === H2 ? { from: "color" } : H2, K2 = e3.pointBorderWidth, N2 = void 0 === K2 ? 0 : K2, U2 = e3.pointBorderColor, Z = void 0 === U2 ? { theme: "background" } : U2, $ = e3.enableGridX, _ = void 0 === $ || $, ne2 = e3.gridXValues, ae2 = e3.enableGridY, se2 = void 0 === ae2 || ae2, le2 = e3.gridYValues, ue2 = e3.axisTop, de2 = e3.axisRight, ce2 = e3.axisBottom, he2 = void 0 === ce2 ? {} : ce2, fe2 = e3.axisLeft, pe2 = void 0 === fe2 ? {} : fe2, ve2 = e3.legends, ye2 = void 0 === ve2 ? [] : ve2, be2 = e3.isInteractive, ge2 = void 0 === be2 || be2, xe2 = e3.debugMesh, Re2 = void 0 !== xe2 && xe2, Te2 = e3.onMouseLeave, qe2 = e3.onClick, Me2 = e3.tooltip, Oe2 = void 0 === Me2 ? te : Me2, Se2 = e3.canvasRef, Ce2 = Bt(t3, a2, d), we2 = Ce2.margin, ke2 = Ce2.innerWidth, Be2 = Ce2.innerHeight, Ee2 = Ce2.outerWidth, Le2 = Ce2.outerHeight, We3 = Et(), Ge2 = (0, import_react2.useState)(null), Pe2 = Ge2[0], je2 = Ge2[1], Fe2 = me({ data: f2, xScale: v2, xFormat: y, yScale: m, yFormat: g3, width: ke2, height: Be2, colors: w3, curve: T3, areaBaselineValue: j2, pointColor: J, pointBorderColor: Z }), Ve2 = Fe2.lineGenerator, Ye2 = Fe2.areaGenerator, De2 = Fe2.series, Ie = Fe2.xScale, Xe2 = Fe2.yScale, Ae = Fe2.points, ze = C2({ points: Ae, width: ke2, height: Be2, debug: Re2 }), He = ze.delaunay, Je = ze.voronoi;
  (0, import_react2.useEffect)(function() {
    Se2 && (Se2.current = i3.current), i3.current.width = Ee2 * h, i3.current.height = Le2 * h;
    var e4 = i3.current.getContext("2d");
    e4.scale(h, h), e4.fillStyle = We3.background, e4.fillRect(0, 0, Ee2, Le2), e4.translate(we2.left, we2.top), M.forEach(function(i4) {
      if ("function" == typeof i4 && i4({ ctx: e4, innerWidth: ke2, innerHeight: Be2, series: De2, points: Ae, xScale: Ie, yScale: Xe2, lineWidth: B, lineGenerator: Ve2, areaGenerator: Ye2, currentPoint: Pe2, setCurrentPoint: je2 }), "grid" === i4 && We3.grid.line.strokeWidth > 0 && (e4.lineWidth = We3.grid.line.strokeWidth, e4.strokeStyle = We3.grid.line.stroke, _ && D(e4, { width: ke2, height: Be2, scale: Ie, axis: "x", values: ne2 }), se2 && D(e4, { width: ke2, height: Be2, scale: Xe2, axis: "y", values: le2 })), "axes" === i4 && j(e4, { xScale: Ie, yScale: Xe2, width: ke2, height: Be2, top: ue2, right: de2, bottom: he2, left: pe2, theme: We3 }), "areas" === i4 && true === L && (e4.save(), e4.globalAlpha = Y, Ye2.context(e4), De2.forEach(function(i5) {
        e4.fillStyle = i5.color, e4.beginPath(), Ye2(i5.data.map(function(e5) {
          return e5.position;
        })), e4.fill();
      }), e4.restore()), "lines" === i4 && (Ve2.context(e4), De2.forEach(function(i5) {
        e4.strokeStyle = i5.color, e4.lineWidth = B, e4.beginPath(), Ve2(i5.data.map(function(e5) {
          return e5.position;
        })), e4.stroke();
      })), "points" === i4 && true === I && z2 > 0 && Ae.forEach(function(i5) {
        e4.fillStyle = i5.color, e4.beginPath(), e4.arc(i5.x, i5.y, z2 / 2, 0, 2 * Math.PI), e4.fill(), N2 > 0 && (e4.strokeStyle = i5.borderColor, e4.lineWidth = N2, e4.stroke());
      }), "mesh" === i4 && true === Re2 && (T2(e4, Je), Pe2 && O(e4, Je, Pe2.index)), "legends" === i4) {
        var o3 = De2.map(function(e5) {
          return { id: e5.id, label: e5.id, color: e5.color };
        }).reverse();
        ye2.forEach(function(i5) {
          H(e4, re({}, i5, { data: i5.data || o3, containerWidth: ke2, containerHeight: Be2, theme: We3 }));
        });
      }
    });
  }, [i3, Ee2, Le2, M, We3, Ve2, De2, Ie, Xe2, _, ne2, se2, le2, ue2, de2, he2, pe2, ye2, Ae, I, z2, Pe2]);
  var Ke = (0, import_react2.useCallback)(function(e4) {
    var o3 = Xi(i3.current, e4), r3 = o3[0], n3 = o3[1];
    if (!Ui(we2.left, we2.top, ke2, Be2, r3, n3))
      return null;
    var t4 = He.find(r3 - we2.left, n3 - we2.top);
    return Ae[t4];
  }, [i3, we2, ke2, Be2, He]), Ne = k(), Qe = Ne.showTooltipFromEvent, Ue = Ne.hideTooltip, Ze = (0, import_react2.useCallback)(function(e4) {
    var i4 = Ke(e4);
    je2(i4), i4 ? Qe((0, import_react2.createElement)(Oe2, { point: i4 }), e4) : Ue();
  }, [Ke, je2, Qe, Ue, Oe2]), $e = (0, import_react2.useCallback)(function(e4) {
    Ue(), je2(null), Pe2 && Te2 && Te2(Pe2, e4);
  }, [Ue, je2, Te2]), _e = (0, import_react2.useCallback)(function(e4) {
    if (qe2) {
      var i4 = Ke(e4);
      i4 && qe2(i4, e4);
    }
  }, [Ke, qe2]);
  return (0, import_jsx_runtime2.jsx)("canvas", { ref: i3, width: Ee2 * h, height: Le2 * h, style: { width: Ee2, height: Le2, cursor: ge2 ? "auto" : "normal" }, onMouseEnter: ge2 ? Ze : void 0, onMouseMove: ge2 ? Ze : void 0, onMouseLeave: ge2 ? $e : void 0, onClick: ge2 ? _e : void 0 });
};
Fe.propTypes = de;
var Ve = Gi(Fe);
var Ye = (0, import_react2.forwardRef)(function(e3, i3) {
  return (0, import_jsx_runtime2.jsx)(Ve, re({}, e3, { canvasRef: i3 }));
});
var De = (0, import_react2.forwardRef)(function(e3, i3) {
  return (0, import_jsx_runtime2.jsx)(Jt, { children: function(o3) {
    var r3 = o3.width, n3 = o3.height;
    return (0, import_jsx_runtime2.jsx)(Ye, re({ width: r3, height: n3 }, e3, { ref: i3 }));
  } });
});
export {
  be as LINE_UNIQUE_ID_PREFIX,
  Pe as Line,
  Ye as LineCanvas,
  fe as LineCanvasDefaultProps,
  de as LineCanvasPropTypes,
  he as LineDefaultProps,
  ue as LinePropTypes,
  je as ResponsiveLine,
  De as ResponsiveLineCanvas,
  ve as useAreaGenerator,
  me as useLine,
  pe as useLineGenerator,
  ye as useSlices
};
//# sourceMappingURL=@nivo_line.js.map
