{
  "version": 3,
  "sources": ["../../lodash/uniqueId.js", "../../delaunator/index.js", "../../d3-delaunay/src/path.js", "../../d3-delaunay/src/polygon.js", "../../d3-delaunay/src/voronoi.js", "../../d3-delaunay/src/delaunay.js", "../../@nivo/voronoi/src/props.ts", "../../@nivo/voronoi/src/computeMesh.ts", "../../@nivo/voronoi/src/hooks.ts", "../../@nivo/voronoi/src/Voronoi.tsx", "../../@nivo/voronoi/src/ResponsiveVoronoi.tsx", "../../@nivo/voronoi/src/Mesh.tsx", "../../@nivo/voronoi/src/meshCanvas.ts", "../../@nivo/line/src/PointTooltip.js", "../../@nivo/line/src/SliceTooltip.js", "../../@nivo/line/src/props.js", "../../@nivo/line/src/hooks.js", "../../@nivo/line/src/Areas.js", "../../@nivo/line/src/LinesItem.js", "../../@nivo/line/src/Lines.js", "../../@nivo/line/src/SlicesItem.js", "../../@nivo/line/src/Slices.js", "../../@nivo/line/src/Points.js", "../../@nivo/line/src/Mesh.js", "../../@nivo/line/src/Line.js", "../../@nivo/line/src/ResponsiveLine.js", "../../@nivo/line/src/LineCanvas.js", "../../@nivo/line/src/ResponsiveLineCanvas.js"],
  "sourcesContent": ["var toString = require('./toString');\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n", "\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\n// return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\nfunction orientIfSure(px, py, rx, ry, qx, qy) {\n    const l = (ry - py) * (qx - px);\n    const r = (rx - px) * (qy - py);\n    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n}\n\n// a more robust orientation test that's stable in a given triangle (to fix robustness issues)\nfunction orient(rx, ry, qx, qy, px, py) {\n    const sign = orientIfSure(px, py, rx, ry, qx, qy) ||\n    orientIfSure(rx, ry, qx, qy, px, py) ||\n    orientIfSure(qx, qy, px, py, rx, ry);\n    return sign < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n", "const epsilon = 1e-6;\n\nexport default class Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n", "export default class Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n", "import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const bl = dx * dx + dy * dy;\n      const cl = ex * ex + ey * ey;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (!ab) {\n        // degenerate case (collinear diagram)\n        x = (x1 + x3) / 2 - 1e8 * ey;\n        y = (y1 + y3) / 2 + 1e8 * ex;\n      }\n      else if (Math.abs(ab) < 1e-8) {\n        // almost equal points (degenerate triangle)\n        x = (x1 + x3) / 2;\n        y = (y1 + y3) / 2;\n      } else {\n        const d = 1 / ab;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] == cj[aj]\n          && ci[ai + 1] == cj[aj + 1]\n          && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]\n          && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]\n          ) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    if (P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k]\n        || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])\n          P.splice(j, 2), i -= 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}\n", "import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI, pow = Math.pow;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points\n        ? flatArray(points, fx, fy, that)\n        : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      this.triangles[1] = hull[1];\n      this.triangles[2] = hull[1];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) inedges[hull[1]] = 0;\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r = 2) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n", "import { VoronoiDomain, VoronoiLayer } from './types'\n\nexport const defaultVoronoiProps = {\n    xDomain: [0, 1] as VoronoiDomain,\n    yDomain: [0, 1] as VoronoiDomain,\n    layers: ['links', 'cells', 'points', 'bounds'] as VoronoiLayer[],\n    enableLinks: false,\n    linkLineWidth: 1,\n    linkLineColor: '#bbbbbb',\n    enableCells: true,\n    cellLineWidth: 2,\n    cellLineColor: '#000000',\n    enablePoints: true,\n    pointSize: 4,\n    pointColor: '#666666',\n    role: 'img',\n}\n", "import { Delaunay } from 'd3-delaunay'\n\ntype NumberPropertyNames<T> = {\n    [K in keyof T]: T[K] extends number ? K : never\n}[keyof T]\n\nexport type XYAccessor<Datum> = NumberPropertyNames<Datum> | ((datum: Datum) => number)\n\nconst getAccessor = <Datum>(directive: XYAccessor<Datum>) =>\n    typeof directive === 'function' ? directive : (datum: Datum) => datum[directive]\n\n/**\n * The delaunay generator requires an array\n * where each point is defined as an array\n * of 2 elements: [x: number, y: number].\n *\n * Points represent the raw input data\n * and x/y represent accessors to x & y.\n */\nexport const computeMeshPoints = <Datum>({\n    points,\n    x = 'x' as NumberPropertyNames<Datum>,\n    y = 'y' as NumberPropertyNames<Datum>,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n}): [number, number][] => {\n    const getX = getAccessor<Datum>(x)\n    const getY = getAccessor<Datum>(y)\n\n    return points.map(point => [getX(point) as number, getY(point) as number])\n}\n\nexport const computeMesh = ({\n    points,\n    width,\n    height,\n    debug,\n}: {\n    points: [number, number][]\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const delaunay = Delaunay.from(points)\n    const voronoi = debug ? delaunay.voronoi([0, 0, width, height]) : undefined\n\n    return { delaunay, voronoi }\n}\n", "import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport { Delaunay } from 'd3-delaunay'\nimport { computeMeshPoints, computeMesh, XYAccessor } from './computeMesh'\nimport { VoronoiCommonProps, VoronoiDatum, VoronoiCustomLayerProps } from './types'\n\nexport const useVoronoiMesh = <Datum>({\n    points,\n    x,\n    y,\n    width,\n    height,\n    debug,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const points2d = useMemo(() => computeMeshPoints<Datum>({ points, x, y }), [points, x, y])\n\n    return useMemo(\n        () => computeMesh({ points: points2d, width, height, debug }),\n        [points2d, width, height, debug]\n    )\n}\n\nexport const useVoronoi = ({\n    data,\n    width,\n    height,\n    xDomain,\n    yDomain,\n}: {\n    data: VoronoiDatum[]\n    width: number\n    height: number\n    xDomain: VoronoiCommonProps['xDomain']\n    yDomain: VoronoiCommonProps['yDomain']\n}) => {\n    const xScale = useMemo(() => scaleLinear().domain(xDomain).range([0, width]), [xDomain, width])\n    const yScale = useMemo(\n        () => scaleLinear().domain(yDomain).range([0, height]),\n        [yDomain, height]\n    )\n\n    const points = useMemo(\n        () =>\n            data.map(d => ({\n                x: xScale(d.x),\n                y: yScale(d.y),\n                data: d,\n            })),\n        [data, xScale, yScale]\n    )\n\n    return useMemo(() => {\n        const delaunay = Delaunay.from(points.map(p => [p.x, p.y]))\n        const voronoi = delaunay.voronoi([0, 0, width, height])\n\n        return {\n            points,\n            delaunay,\n            voronoi,\n        }\n    }, [points, width, height])\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useVoronoiLayerContext = ({\n    points,\n    delaunay,\n    voronoi,\n}: VoronoiCustomLayerProps): VoronoiCustomLayerProps =>\n    useMemo(\n        () => ({\n            points,\n            delaunay,\n            voronoi,\n        }),\n        [points, delaunay, voronoi]\n    )\n", "import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { VoronoiSvgProps, VoronoiLayerId } from './types'\nimport { defaultVoronoiProps } from './props'\nimport { useVoronoi, useVoronoiLayerContext } from './hooks'\n\ntype InnerVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>\n\nconst InnerVoronoi = ({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    layers = defaultVoronoiProps.layers,\n    xDomain = defaultVoronoiProps.xDomain,\n    yDomain = defaultVoronoiProps.yDomain,\n    enableLinks = defaultVoronoiProps.enableLinks,\n    linkLineWidth = defaultVoronoiProps.linkLineWidth,\n    linkLineColor = defaultVoronoiProps.linkLineColor,\n    enableCells = defaultVoronoiProps.enableCells,\n    cellLineWidth = defaultVoronoiProps.cellLineWidth,\n    cellLineColor = defaultVoronoiProps.cellLineColor,\n    enablePoints = defaultVoronoiProps.enableCells,\n    pointSize = defaultVoronoiProps.pointSize,\n    pointColor = defaultVoronoiProps.pointColor,\n    role = defaultVoronoiProps.role,\n}: InnerVoronoiProps) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { points, delaunay, voronoi } = useVoronoi({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        xDomain,\n        yDomain,\n    })\n\n    const layerById: Record<VoronoiLayerId, ReactNode> = {\n        links: null,\n        cells: null,\n        points: null,\n        bounds: null,\n    }\n\n    if (enableLinks && layers.includes('links')) {\n        layerById.links = (\n            <path\n                key=\"links\"\n                stroke={linkLineColor}\n                strokeWidth={linkLineWidth}\n                fill=\"none\"\n                d={delaunay.render()}\n            />\n        )\n    }\n\n    if (enableCells && layers.includes('cells')) {\n        layerById.cells = (\n            <path\n                key=\"cells\"\n                d={voronoi.render()}\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n            />\n        )\n    }\n\n    if (enablePoints && layers.includes('points')) {\n        layerById.points = (\n            <path\n                key=\"points\"\n                stroke=\"none\"\n                fill={pointColor}\n                d={delaunay.renderPoints(undefined, pointSize / 2)}\n            />\n        )\n    }\n\n    if (layers.includes('bounds')) {\n        layerById.bounds = (\n            <path\n                key=\"bounds\"\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n                d={voronoi.renderBounds()}\n            />\n        )\n    }\n\n    const layerContext = useVoronoiLayerContext({\n        points,\n        delaunay,\n        voronoi,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as VoronoiLayerId] !== undefined) {\n                    return layerById[layer as VoronoiLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Voronoi = ({\n    theme,\n    ...otherProps\n}: Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>) => (\n    <Container isInteractive={false} animate={false} theme={theme}>\n        <InnerVoronoi {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { VoronoiSvgProps } from './types'\nimport { Voronoi } from './Voronoi'\n\ntype ResponsiveVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data'>\n\nexport const ResponsiveVoronoi = (props: ResponsiveVoronoiProps) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Voronoi width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { useRef, useState, useCallback, useMemo, MouseEvent, TouchEvent } from 'react'\nimport { getRelativeCursor } from '@nivo/core'\nimport { useVoronoiMesh } from './hooks'\nimport { XYAccessor } from './computeMesh'\n\ntype MouseHandler<Datum> = (datum: Datum, event: MouseEvent) => void\ntype TouchHandler<Datum> = (datum: Datum, event: TouchEvent) => void\n\ninterface MeshProps<Datum> {\n    nodes: Datum[]\n    width: number\n    height: number\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    onMouseEnter?: MouseHandler<Datum>\n    onMouseMove?: MouseHandler<Datum>\n    onMouseLeave?: MouseHandler<Datum>\n    onClick?: MouseHandler<Datum>\n    onTouchStart?: TouchHandler<Datum>\n    onTouchMove?: TouchHandler<Datum>\n    onTouchEnd?: TouchHandler<Datum>\n    enableTouchCrosshair?: boolean\n    debug?: boolean\n}\n\nexport const Mesh = <Datum,>({\n    nodes,\n    width,\n    height,\n    x,\n    y,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    enableTouchCrosshair = false,\n    debug,\n}: MeshProps<Datum>) => {\n    const elementRef = useRef<SVGGElement>(null)\n    const [currentIndex, setCurrentIndex] = useState<number | null>(null)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        x,\n        y,\n        width,\n        height,\n        debug,\n    })\n\n    const voronoiPath = useMemo(() => {\n        if (debug && voronoi) {\n            return voronoi.render()\n        }\n\n        return undefined\n    }, [debug, voronoi])\n\n    const getIndexAndNodeFromMouseEvent = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            if (!elementRef.current) {\n                return [null, null]\n            }\n\n            const [x, y] = getRelativeCursor(elementRef.current, event)\n            const index = delaunay.find(x, y)\n\n            return [index, index !== undefined ? nodes[index] : null] as [number, Datum | null]\n        },\n        [delaunay, nodes]\n    )\n\n    const getIndexAndNodeFromTouchEvent = useCallback(\n        (event: TouchEvent<SVGRectElement>) => {\n            if (!elementRef.current) {\n                return [null, null]\n            }\n\n            const [x, y] = getRelativeCursor(elementRef.current, event)\n            const index = delaunay.find(x, y)\n\n            return [index, index !== undefined ? nodes[index] : null] as [number, Datum | null]\n        },\n        [delaunay, nodes]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            const [index, node] = getIndexAndNodeFromMouseEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseEnter?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromMouseEvent, setCurrentIndex, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            const [index, node] = getIndexAndNodeFromMouseEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseMove?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromMouseEvent, setCurrentIndex, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            setCurrentIndex(null)\n            if (onMouseLeave) {\n                let previousNode: Datum | undefined = undefined\n                if (currentIndex !== null) {\n                    previousNode = nodes[currentIndex]\n                }\n                previousNode && onMouseLeave(previousNode, event)\n            }\n        },\n        [setCurrentIndex, currentIndex, onMouseLeave, nodes]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            const [index, node] = getIndexAndNodeFromMouseEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromMouseEvent, setCurrentIndex, onClick]\n    )\n\n    const handleTouchStart = useCallback(\n        (event: TouchEvent<SVGRectElement>) => {\n            const [index, node] = getIndexAndNodeFromTouchEvent(event)\n            if (enableTouchCrosshair) {\n                setCurrentIndex(index)\n            }\n            if (node) {\n                onTouchStart?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromTouchEvent, enableTouchCrosshair, onTouchStart]\n    )\n\n    const handleTouchMove = useCallback(\n        (event: TouchEvent<SVGRectElement>) => {\n            const [index, node] = getIndexAndNodeFromTouchEvent(event)\n            if (enableTouchCrosshair) {\n                setCurrentIndex(index)\n            }\n            if (node) {\n                onTouchMove?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromTouchEvent, enableTouchCrosshair, onTouchMove]\n    )\n\n    const handleTouchEnd = useCallback(\n        (event: TouchEvent<SVGRectElement>) => {\n            if (enableTouchCrosshair) {\n                setCurrentIndex(null)\n            }\n            if (onTouchEnd) {\n                let previousNode: Datum | undefined = undefined\n                if (currentIndex !== null) {\n                    previousNode = nodes[currentIndex]\n                }\n                previousNode && onTouchEnd(previousNode, event)\n            }\n        },\n        [enableTouchCrosshair, onTouchEnd, currentIndex, nodes]\n    )\n\n    return (\n        <g ref={elementRef}>\n            {debug && voronoi && (\n                <>\n                    <path d={voronoiPath} stroke=\"red\" strokeWidth={1} opacity={0.75} />\n                    {/* highlight current cell */}\n                    {currentIndex !== null && (\n                        <path fill=\"pink\" opacity={0.35} d={voronoi.renderCell(currentIndex)} />\n                    )}\n                </>\n            )}\n            {/* transparent rect to intercept mouse events */}\n            <rect\n                data-ref=\"mesh-interceptor\"\n                width={width}\n                height={height}\n                fill=\"red\"\n                opacity={0}\n                style={{ cursor: 'auto' }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onTouchStart={handleTouchStart}\n                onTouchMove={handleTouchMove}\n                onTouchEnd={handleTouchEnd}\n                onClick={handleClick}\n            />\n        </g>\n    )\n}\n", "import { Delaunay, Voronoi } from 'd3-delaunay'\n\nexport const renderVoronoiToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.75\n    ctx.beginPath()\n    voronoi.render(ctx)\n    ctx.strokeStyle = 'red'\n    ctx.lineWidth = 1\n    ctx.stroke()\n\n    ctx.restore()\n}\n\nexport const renderVoronoiCellToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>,\n    index: number\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.35\n    ctx.beginPath()\n    voronoi.renderCell(index, ctx)\n    ctx.fillStyle = 'red'\n    ctx.fill()\n\n    ctx.restore()\n}\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { LegendPropShape } from '@nivo/legends'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: PropTypes.object.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: PropTypes.object.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: PropTypes.string.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    enableTouchCrosshair: PropTypes.bool,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    enableTouchCrosshair: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport uniqueId from 'lodash/uniqueId'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ componentId, enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: `slice:${componentId}:${x}`,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [componentId, enableSlices, height, points, width])\n}\n\nexport const LINE_UNIQUE_ID_PREFIX = 'line'\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n}) => {\n    const [componentId] = useState(uniqueId(LINE_UNIQUE_ID_PREFIX))\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState([])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        componentId,\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({\n    slice,\n    slices,\n    axis,\n    debug,\n    tooltip,\n    isCurrent,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onMouseEnter && onMouseEnter(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, setCurrent, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            onMouseMove && onMouseMove(slice, event)\n        },\n        [showTooltipFromEvent, tooltip, slice, axis, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(slice, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave, slice]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            onClick && onClick(slice, event)\n        },\n        [slice, onClick]\n    )\n\n    const handeOnTouchStart = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n            onTouchStart && onTouchStart(slice, event)\n        },\n        [axis, onTouchStart, setCurrent, showTooltipFromEvent, slice, tooltip]\n    )\n\n    const handeOnTouchMove = useCallback(\n        event => {\n            // This event will be locked to the element that was touched originally\n            // We find the element that is currently being \"hovered over\" by getting the element at the touch point\n            const touchPoint = event.touches[0]\n            const touchingElement = document.elementFromPoint(\n                touchPoint.clientX,\n                touchPoint.clientY\n            )\n            // Is this a nivo ref?\n            const touchingSliceId = touchingElement?.getAttribute('data-ref')\n            if (touchingSliceId) {\n                // Is this a slice for this graph?\n                const slice = slices.find(slice => slice.id === touchingSliceId)\n                if (slice) {\n                    showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n                    setCurrent(slice)\n                }\n            }\n\n            // Note here, this will pass the original slice, not the one we found\n            // But this can be found with document.elementFromPoint()\n            onTouchMove && onTouchMove(slice, event)\n        },\n        [axis, onTouchMove, setCurrent, showTooltipFromEvent, slice, slices, tooltip]\n    )\n\n    const handleOnTouchEnd = useCallback(\n        event => {\n            hideTooltip()\n            setCurrent(null)\n            onTouchEnd && onTouchEnd(slice, event)\n        },\n        [hideTooltip, setCurrent, onTouchEnd, slice]\n    )\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            onTouchStart={handeOnTouchStart}\n            onTouchMove={handeOnTouchMove}\n            onTouchEnd={handleOnTouchEnd}\n            data-ref={slice.id}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    slices: PropTypes.arrayOf(PropTypes.object).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n}\n\nexport default memo(SlicesItem)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({\n    slices,\n    axis,\n    debug,\n    height,\n    tooltip,\n    current,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n}) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            slices={slices}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n            onMouseEnter={onMouseEnter}\n            onMouseMove={onMouseMove}\n            onMouseLeave={onMouseLeave}\n            onClick={onClick}\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMove}\n            onTouchEnd={onTouchEnd}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    onTouchStart: PropTypes.func,\n    onTouchMove: PropTypes.func,\n    onTouchEnd: PropTypes.func,\n}\n\nexport default memo(Slices)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points\n        .slice(0)\n        .reverse()\n        .map(point => {\n            const mappedPoint = {\n                id: point.id,\n                x: point.x,\n                y: point.y,\n                datum: point.data,\n                fill: point.color,\n                stroke: point.borderColor,\n                label: enableLabel ? getLabel(point.data) : null,\n            }\n\n            return mappedPoint\n        })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    tooltip,\n    debug,\n    enableTouchCrosshair,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, setCurrent, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    const handleTouchStart = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onTouchStart && onTouchStart(point, event)\n        },\n        [margin.left, margin.top, onTouchStart, setCurrent, showTooltipAt, tooltip]\n    )\n\n    const handleTouchMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onTouchMove && onTouchMove(point, event)\n        },\n        [margin.left, margin.top, onTouchMove, setCurrent, showTooltipAt, tooltip]\n    )\n\n    const handleTouchEnd = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onTouchEnd && onTouchEnd(point, event)\n        },\n        [onTouchEnd, hideTooltip, setCurrent]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n            enableTouchCrosshair={enableTouchCrosshair}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    onTouchStart: PropTypes.func,\n    onTouchMove: PropTypes.func,\n    onTouchEnd: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useState } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec = { type: 'point' },\n        xFormat,\n        yScale: yScaleSpec = {\n            type: 'linear',\n            min: 0,\n            max: 'auto',\n        },\n        yFormat,\n        layers = [\n            'grid',\n            'markers',\n            'axes',\n            'areas',\n            'crosshair',\n            'lines',\n            'points',\n            'slices',\n            'mesh',\n            'legends',\n        ],\n        curve = 'linear',\n        areaBaselineValue = 0,\n\n        colors = { scheme: 'nivo' },\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom = {},\n        axisLeft = {},\n        enableGridX = true,\n        enableGridY = true,\n        gridXValues,\n        gridYValues,\n\n        lineWidth = 2,\n        enableArea = false,\n        areaOpacity = 0.2,\n        areaBlendMode = 'normal',\n\n        enablePoints = true,\n        pointSymbol,\n        pointSize = 6,\n        pointColor = { from: 'color' },\n        pointBorderWidth = 0,\n        pointBorderColor = { theme: 'background' },\n        enablePointLabel = false,\n        pointLabel = 'yFormatted',\n        pointLabelYOffset,\n\n        defs = [],\n        fill = [],\n\n        markers,\n\n        legends = [],\n\n        isInteractive = true,\n\n        useMesh = false,\n        debugMesh = false,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        onTouchStart,\n        onTouchMove,\n        onTouchEnd,\n\n        tooltip = PointTooltip,\n\n        enableSlices = false,\n        debugSlices = false,\n        sliceTooltip = SliceTooltip,\n\n        enableCrosshair = true,\n        crosshairType = 'bottom-left',\n        enableTouchCrosshair = false,\n\n        role = 'img',\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                onTouchStart={onTouchStart}\n                onTouchMove={onTouchMove}\n                onTouchEnd={onTouchEnd}\n                tooltip={tooltip}\n                enableTouchCrosshair={enableTouchCrosshair}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\n\nexport default withContainer(Line)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes } from './props'\nimport { useLine } from './hooks'\nimport PointTooltip from './PointTooltip'\n\nconst LineCanvas = props => {\n    const canvasEl = useRef(null)\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n\n        data,\n        xScale: xScaleSpec = { type: 'point' },\n        xFormat,\n        yScale: yScaleSpec = {\n            type: 'linear',\n            min: 0,\n            max: 'auto',\n        },\n        yFormat,\n        curve = 'linear',\n\n        layers = [\n            'grid',\n            'markers',\n            'axes',\n            'areas',\n            'crosshair',\n            'lines',\n            'points',\n            'slices',\n            'mesh',\n            'legends',\n        ],\n\n        colors = { scheme: 'nivo' },\n        lineWidth = 2,\n\n        enableArea = false,\n        areaBaselineValue = 0,\n        areaOpacity = 0.2,\n\n        enablePoints = true,\n        pointSize = 6,\n        pointColor = { from: 'color' },\n        pointBorderWidth = 0,\n        pointBorderColor = { theme: 'background' },\n\n        enableGridX = true,\n        gridXValues,\n        enableGridY = true,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom = {},\n        axisLeft = {},\n\n        legends = [],\n\n        isInteractive = true,\n        debugMesh = false,\n        //onMouseEnter,\n        //onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip = PointTooltip,\n        canvasRef,\n    } = props\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n"],
  "mappings": "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",
  "names": ["n", "i", "p", "i2", "r", "j", "k", "e", "t", "a", "b", "pr", "l", "r", "w", "i", "j", "n", "t2", "x1", "y1", "t", "v", "p", "S", "e", "P", "k", "p", "i", "a", "b", "r", "j", "e", "f", "n", "collinear", "l", "t", "h", "t2", "getAccessor", "directive", "datum", "computeMeshPoints", "_ref", "points", "_ref$x", "x", "_ref$y", "y", "getX", "getY", "map", "point", "computeMesh", "_ref2", "width", "height", "debug", "delaunay", "Delaunay", "from", "voronoi", "useVoronoiMesh", "points2d", "useMemo", "Mesh", "_ref", "nodes", "width", "height", "x", "y", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "onTouchStart", "onTouchMove", "onTouchEnd", "_ref$enableTouchCross", "enableTouchCrosshair", "debug", "elementRef", "useRef", "_useState", "useState", "currentIndex", "setCurrentIndex", "_useVoronoiMesh", "useVoronoiMesh", "points", "delaunay", "voronoi", "voronoiPath", "useMemo", "render", "getIndexAndNodeFromMouseEvent", "useCallback", "event", "current", "_getRelativeCursor", "getRelativeCursor", "index", "find", "getIndexAndNodeFromTouchEvent", "_getRelativeCursor2", "handleMouseEnter", "_getIndexAndNodeFromM", "node", "handleMouseMove", "_getIndexAndNodeFromM2", "handleMouseLeave", "previousNode", "handleClick", "_getIndexAndNodeFromM3", "handleTouchStart", "_getIndexAndNodeFromT", "handleTouchMove", "_getIndexAndNodeFromT2", "handleTouchEnd", "_jsxs", "ref", "children", "_Fragment", "_jsx", "d", "stroke", "strokeWidth", "opacity", "fill", "renderCell", "style", "cursor", "renderVoronoiToCanvas", "ctx", "save", "globalAlpha", "beginPath", "strokeStyle", "lineWidth", "restore", "renderVoronoiCellToCanvas", "fillStyle", "LinePointTooltip", "_ref", "point", "_jsx", "BasicTooltip", "id", "_jsxs", "children", "data", "xFormatted", "yFormatted", "enableChip", "color", "serieColor", "propTypes", "PropTypes", "object", "isRequired", "memo", "SliceTooltip", "slice", "axis", "theme", "useTheme", "otherAxis", "TableTooltip", "rows", "points", "map", "Chip", "style", "tooltip", "chip", "serieId", "tableCellValue", "oneOf", "commonPropTypes", "arrayOf", "shape", "oneOfType", "string", "number", "x", "instanceOf", "Date", "y", "xScale", "xFormat", "func", "yScale", "yFormat", "layers", "curve", "lineCurvePropType", "axisTop", "axisPropType", "axisRight", "axisBottom", "axisLeft", "enableGridX", "bool", "enableGridY", "gridXValues", "gridYValues", "enablePoints", "pointSymbol", "pointSize", "pointColor", "any", "pointBorderWidth", "pointBorderColor", "enablePointLabel", "pointLabel", "markers", "value", "colors", "ordinalColorsPropType", "enableArea", "areaOpacity", "areaBlendMode", "blendModePropType", "areaBaselineValue", "lineWidth", "legends", "LegendPropShape", "isInteractive", "debugMesh", "enableSlices", "debugSlices", "sliceTooltip", "enableCrosshair", "crosshairType", "LinePropTypes", "_extends", "role", "useMesh", "enableTouchCrosshair", "motionPropTypes", "defsPropTypes", "LineCanvasPropTypes", "pixelRatio", "commonDefaultProps", "type", "min", "max", "from", "scheme", "PointTooltip", "LineDefaultProps", "animate", "motionConfig", "defs", "fill", "LineCanvasDefaultProps", "window", "devicePixelRatio", "useLineGenerator", "useMemo", "line", "defined", "d", "curveFromProp", "useAreaGenerator", "_ref2", "area", "y1", "y0", "useSlices", "_ref4", "componentId", "width", "height", "Map", "forEach", "has", "get", "push", "set", "Array", "entries", "sort", "a", "b", "_ref5", "i", "slices", "x0", "sliceWidth", "slicePoints", "prevSlice", "nextSlice", "reverse", "_ref6", "sliceHeight", "LINE_UNIQUE_ID_PREFIX", "useLine", "_ref7", "_ref7$xScale", "xScaleSpec", "_ref7$yScale", "yScaleSpec", "_ref7$colors", "_ref7$curve", "_ref7$areaBaselineVal", "_ref7$pointColor", "_ref7$pointBorderColo", "_ref7$enableSlices", "enableSlicesTooltip", "useState", "uniqueId", "formatX", "useValueFormatter", "formatY", "getColor", "useOrdinalColorScale", "getPointColor", "useInheritedColor", "getPointBorderColor", "_useState2", "hiddenIds", "setHiddenIds", "_useMemo", "computeXYScalesForSeries", "filter", "item", "indexOf", "rawSeries", "series", "_useMemo2", "dataWithColor", "label", "datum", "find", "serie", "Boolean", "legendData", "hidden", "toggleSerie", "useCallback", "state", "concat", "_ref3", "reduce", "acc", "position", "index", "length", "borderColor", "lineGenerator", "areaGenerator", "AreaPath", "path", "_useMotionConfig", "useMotionConfig", "springConfig", "config", "animatedPath", "useAnimatedPath", "animatedProps", "useSpring", "immediate", "animated", "fillOpacity", "strokeWidth", "mixBlendMode", "Areas", "computedLines", "lines", "LinesItem", "thickness", "stroke", "Lines", "SlicesItem", "debug", "isCurrent", "setCurrent", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "onTouchStart", "onTouchMove", "onTouchEnd", "_useTooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "handleMouseEnter", "event", "createElement", "handleMouseMove", "handleMouseLeave", "handleClick", "handeOnTouchStart", "handeOnTouchMove", "touchPoint", "touches", "touchingElement", "document", "elementFromPoint", "clientX", "clientY", "touchingSliceId", "getAttribute", "handleOnTouchEnd", "strokeOpacity", "Slices", "current", "Points", "symbol", "size", "borderWidth", "enableLabel", "labelYOffset", "getLabel", "getLabelGenerator", "mappedPoints", "DotsItem", "Mesh", "margin", "showTooltipAt", "left", "top", "handleTouchStart", "handleTouchMove", "handleTouchEnd", "BaseMesh", "nodes", "Line", "props", "_props$xScale", "_props$yScale", "_props$layers", "_props$curve", "_props$areaBaselineVa", "_props$colors", "partialMargin", "_props$axisBottom", "_props$axisLeft", "_props$enableGridX", "_props$enableGridY", "_props$lineWidth", "_props$enableArea", "_props$areaOpacity", "_props$areaBlendMode", "_props$enablePoints", "_props$pointSize", "_props$pointColor", "_props$pointBorderWid", "_props$pointBorderCol", "_props$enablePointLab", "_props$pointLabel", "pointLabelYOffset", "_props$defs", "_props$fill", "_props$legends", "_props$isInteractive", "_props$useMesh", "_props$debugMesh", "_props$tooltip", "_props$enableSlices", "_props$debugSlices", "_props$sliceTooltip", "_props$enableCrosshai", "_props$crosshairType", "_props$enableTouchCro", "_props$role", "_useDimensions", "useDimensions", "innerWidth", "innerHeight", "outerWidth", "outerHeight", "_useLine", "_useState", "currentPoint", "setCurrentPoint", "currentSlice", "setCurrentSlice", "layerById", "grid", "Grid", "xValues", "yValues", "CartesianMarkers", "axes", "Axes", "right", "bottom", "areas", "crosshair", "mesh", "legend", "BoxLegendSvg", "containerWidth", "containerHeight", "undefined", "boundDefs", "bindDefs", "Crosshair", "SvgWrapper", "layer", "Fragment", "withContainer", "ResponsiveLine", "ResponsiveWrapper", "LineCanvas", "canvasEl", "useRef", "_props$pixelRatio", "canvasRef", "_useVoronoiMesh", "useVoronoiMesh", "delaunay", "voronoi", "useEffect", "ctx", "getContext", "scale", "fillStyle", "background", "fillRect", "translate", "strokeStyle", "renderGridLinesToCanvas", "values", "renderAxesToCanvas", "save", "globalAlpha", "context", "beginPath", "restore", "arc", "Math", "PI", "renderVoronoiToCanvas", "renderVoronoiCellToCanvas", "renderLegendToCanvas", "getPointFromMouseEvent", "_getRelativeCursor", "getRelativeCursor", "isCursorInRect", "pointIndex", "handleMouseHover", "ref", "cursor", "LineCanvasWithContainer", "LineCanvas$1", "forwardRef"]
}
